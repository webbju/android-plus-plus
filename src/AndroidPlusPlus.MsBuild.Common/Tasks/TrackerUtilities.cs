////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Diagnostics;
using System.Text;
using System.IO;
using System.Reflection;
using System.Resources;
using System.Threading;

using Microsoft.Build.Framework;
using Microsoft.Win32;
using Microsoft.Build.Utilities;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace AndroidPlusPlus.MsBuild.Common
{

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  public static class TrackerUtilities
  {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public static Dictionary<string, HashSet <string>> GetDependencyTableFromTLog (ITaskItem tlog)
    {
      // 
      // Parse and collate a TLog. It's best to achieve this by associating dependency graph 'entries' with associated sources.
      // 
      // Format:
      // 
      //    ^FILE1.C
      //    FILE1.OBJ
      //    ^FILE2.C|FILE3.C
      //    FILE2.OBJ
      //    FILE3.OBJ
      // 

      if (tlog == null)
      {
        throw new ArgumentNullException ("tlog");
      }

      string tlogFullPath = (!string.IsNullOrEmpty (tlog.GetMetadata ("FullPath")) ? tlog.GetMetadata ("FullPath") : Path.GetFullPath (tlog.ItemSpec));

      if (string.IsNullOrEmpty (tlogFullPath))
      {
        throw new ArgumentException ("Could not evaluate full path for TLog: " + tlog);
      }

      Dictionary<string, HashSet<string>> trackedDependencyTable = new Dictionary<string, HashSet<string>> ();

      if (!File.Exists (tlogFullPath))
      {
        return trackedDependencyTable; // Don't error as sometimes this is expected; full rebuilds for example.
      }

      using (StreamReader reader = new StreamReader (tlogFullPath, Encoding.Unicode))
      {
        string trackedSourceLineData = reader.ReadLine ();

        while (!string.IsNullOrWhiteSpace (trackedSourceLineData))
        {
          if (trackedSourceLineData.StartsWith ("^"))
          {
            HashSet<string> trackedSources = new HashSet<string> (trackedSourceLineData.Substring (1).Split ('|'));

            string trackedDependencyEntriesLineData = reader.ReadLine ();

            while (!string.IsNullOrWhiteSpace (trackedDependencyEntriesLineData))
            {
              HashSet<string> dependentSources;

              if (trackedDependencyTable.TryGetValue (trackedDependencyEntriesLineData, out dependentSources))
              {
                foreach (string source in trackedSources)
                {
                  if (!dependentSources.Contains (source))
                  {
                    dependentSources.Add (source);
                  }
                }
              }
              else
              {
                trackedDependencyTable.Add (trackedDependencyEntriesLineData, new HashSet<string> (trackedSources));
              }

              trackedDependencyEntriesLineData = reader.ReadLine ();
            }
          }

          trackedSourceLineData = reader.ReadLine ();
        }
      }

      return trackedDependencyTable;
    }


    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
