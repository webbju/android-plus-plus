////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using AndroidPlusPlus.Common;
using Microsoft.Build.Framework;
using Microsoft.Build.Utilities;
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace AndroidPlusPlus.MsBuild.Common
{

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  public static class TrackerUtilities
  {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#if false
    public static Dictionary<string, HashSet<ITaskItem>> ParseTrackerLogForCommandMapping(ICollection<ITaskItem> trackerLogs)
    {
      // 
      // Parse TLog files (exported from Tracker.exe) to produce file modifications grouped by command.
      // 

      var commandLookup = new Dictionary<string, HashSet<ITaskItem>>();

      if (trackerLogs?.Count == 0)
      {
        return commandLookup;
      }

      foreach (var log in trackerLogs)
      {
        using StreamReader reader = File.OpenText(log.ItemSpec);

        string command = "";

        for (string line = reader.ReadLine(); !string.IsNullOrEmpty(line); line = reader.ReadLine())
        {
          if (line.StartsWith("#Command:"))
          {
            command = line.Substring("#Command:".Length);

            continue;
          }

          if (line.StartsWith("^"))
          {
            continue; //throw new InvalidOperationException($"Log ({log}) contains a rooted element: {line}");
          }

          if (!commandLookup.TryGetValue(command, out HashSet<ITaskItem> taskItems))
          {
            taskItems = new HashSet<ITaskItem>();
          }

          taskItems.Add(new TaskItem(PathUtils.NormalizePath(line)));

          commandLookup[command] = taskItems;
        }
      }

      return commandLookup;
    }
#endif

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#if false
    public static Dictionary<string, HashSet <string>> GetDependencyTableFromTLog (ITaskItem tlog)
    {
      // 
      // Parse and collate a TLog. It's best to achieve this by associating dependency graph 'entries' with associated sources.
      // 
      // Format:
      // 
      //    ^FILE1.C
      //    FILE1.OBJ
      //    ^FILE2.C|FILE3.C
      //    FILE2.OBJ
      //    FILE3.OBJ
      // 

      if (tlog == null)
      {
        throw new ArgumentNullException (nameof(tlog));
      }

      string tlogFullPath = (!string.IsNullOrEmpty (tlog.GetMetadata ("FullPath")) ? tlog.GetMetadata ("FullPath") : Path.GetFullPath (tlog.ItemSpec));

      if (string.IsNullOrEmpty (tlogFullPath))
      {
        throw new ArgumentException ("Could not evaluate full path for TLog: " + tlog);
      }

      Dictionary<string, HashSet<string>> trackedDependencyTable = new Dictionary<string, HashSet<string>> ();

      if (!File.Exists (tlogFullPath))
      {
        return trackedDependencyTable; // Don't error as sometimes this is expected; full rebuilds for example.
      }

      using (StreamReader reader = new StreamReader (tlogFullPath, Encoding.UTF8))
      {
        string trackedSourceLineData = reader.ReadLine ();

        while (!string.IsNullOrWhiteSpace (trackedSourceLineData))
        {
          if (trackedSourceLineData.StartsWith ("^"))
          {
            HashSet<string> trackedSources = new HashSet<string> (trackedSourceLineData.Substring (1).Split ('|'));

            string trackedDependencyEntriesLineData = reader.ReadLine ();

            while (!string.IsNullOrWhiteSpace (trackedDependencyEntriesLineData))
            {
              if (trackedDependencyTable.TryGetValue (trackedDependencyEntriesLineData, out HashSet<string> dependentSources))
              {
                foreach (string source in trackedSources)
                {
                  if (!dependentSources.Contains (source))
                  {
                    dependentSources.Add (source);
                  }
                }
              }
              else
              {
                trackedDependencyTable.Add (trackedDependencyEntriesLineData, new HashSet<string> (trackedSources));
              }

              trackedDependencyEntriesLineData = reader.ReadLine ();
            }
          }

          trackedSourceLineData = reader.ReadLine ();
        }
      }

      return trackedDependencyTable;
    }
#endif

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
