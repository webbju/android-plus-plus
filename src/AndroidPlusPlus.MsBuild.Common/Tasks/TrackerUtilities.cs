////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using Microsoft.Build.Framework;
using Microsoft.Build.Utilities;
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace AndroidPlusPlus.MsBuild.Common
{

  public static class TrackerUtilities
  {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public static Dictionary<string, string> ReadCommandTLog(ITaskItem commandFile, Encoding responseFileEncoding)
    {
      // 
      // Parse and collate a command TLog (format below) into a HashMap with a "rooted filename" as the key, and command as value.
      // 
      // Format:
      // 
      //    ^FILE1.C
      //    command-line-run --input FILE1.C
      //    ^FILE2.C|FILE3.C
      //    ...
      // 

      var collatedTrackedFiles = new Dictionary<string, string>();

      var commandLineFullPath = commandFile.GetMetadata("FullPath");

      if (!File.Exists(commandLineFullPath))
      {
        return collatedTrackedFiles;
      }

      using StreamReader reader = new StreamReader(commandLineFullPath, responseFileEncoding);

      for (string line = reader.ReadLine(); !string.IsNullOrEmpty(line); line = reader.ReadLine())
      {
        if (line.StartsWith("^"))
        {
          var trackedSources = line.Substring(1).Split(new char[] { '|' }, StringSplitOptions.RemoveEmptyEntries);

          string trackedCommand = reader.ReadLine();

          foreach (var source in trackedSources)
          {
            collatedTrackedFiles.Add(source, trackedCommand);
          }
        }
      }

      return collatedTrackedFiles;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public static void OutputCommandTLog(ITaskItem commandFile, Dictionary<string, string> collatedTrackedFiles, Encoding responseFileEncoding)
    {
      if (commandFile == null)
      {
        throw new ArgumentNullException(nameof(commandFile));
      }

      using StreamWriter writer = new StreamWriter(commandFile.GetMetadata("FullPath"), false, responseFileEncoding);

      foreach (var fileSet in collatedTrackedFiles)
      {
        writer.WriteLine("^" + FileTracker.FormatRootingMarker(new TaskItem(fileSet.Key)));

        writer.WriteLine(fileSet.Value);
      }

      writer.Dispose();
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }

}
