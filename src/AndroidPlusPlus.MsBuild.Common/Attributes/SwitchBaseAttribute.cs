////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using Microsoft.Build.Framework;
using Microsoft.Build.Framework.XamlTypes;
using Microsoft.Build.Utilities;
using System;
using System.Collections.Generic;
using System.Reflection;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace AndroidPlusPlus.MsBuild.Common.Attributes
{

  public class SwitchBaseAttribute : Attribute
  {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public SwitchBaseAttribute(BaseProperty baseProperty)
    {
      this.baseProperty = baseProperty;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected readonly BaseProperty baseProperty;

    protected PropertyInfo propInfo;

    protected Task parentTask;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public virtual void Initialize(Task parentTask, PropertyInfo propInfo)
    {
      this.parentTask = parentTask;

      this.propInfo = propInfo;

      var propertyGetter = propInfo.GetMethod;

#if false
      if (propertyGetter.ReturnType == typeof(bool) || Nullable.GetUnderlyingType(propertyGetter.ReturnType) == typeof(bool))
      {
        Property ??= new BoolProperty();
      }
      else if (propertyGetter.ReturnType == typeof(int) || Nullable.GetUnderlyingType(propertyGetter.ReturnType) == typeof(int))
      {
        Property ??= new IntProperty();
      }
      else if (propertyGetter.ReturnType.IsEnum || (Nullable.GetUnderlyingType(propertyGetter.ReturnType)?.IsEnum ?? false))
      {
        Property ??= new EnumProperty();

        (Property as EnumProperty).AdmissibleValues ??= new List<EnumValue>();

        throw new NotImplementedException("AdmissibleValues not populated.");
      }
      else if (propertyGetter.ReturnType == typeof(string) || Nullable.GetUnderlyingType(propertyGetter.ReturnType) == typeof(string))
      {
        Property ??= new StringProperty();
      }
      else if (propertyGetter.ReturnType == typeof(ITaskItem) || Nullable.GetUnderlyingType(propertyGetter.ReturnType) == typeof(ITaskItem))
      {
        Property ??= new StringProperty();

        (Property as StringProperty).Subtype = "file";

        Property.DataSource ??= new DataSource();

        Property.DataSource.SourceType = "Item";
      }
      else if (propertyGetter.ReturnType == typeof(string[]) || Nullable.GetUnderlyingType(propertyGetter.ReturnType) == typeof(string[]))
      {
        Property ??= new StringListProperty();
      }
      else if (propertyGetter.ReturnType == typeof(ITaskItem[]) || Nullable.GetUnderlyingType(propertyGetter.ReturnType) == typeof(ITaskItem[]))
      {
        Property ??= new StringListProperty();

        (Property as StringListProperty).Subtype = "file";

        Property.DataSource ??= new DataSource();

        Property.DataSource.SourceType = "Item";
      }
#endif

      if (baseProperty == null)
      {
        throw new NotImplementedException($"{nameof(propertyGetter.ReturnType)}: {propertyGetter.ReturnType}");
      }

      baseProperty.Name ??= propInfo.Name ?? throw new ArgumentException(nameof(propInfo.Name));

      baseProperty.DisplayName ??= propInfo.Name ?? throw new ArgumentException(nameof(propInfo.Name));

      var switchDataSources = (SwitchDataSourceAttribute[])GetCustomAttributes(propInfo, typeof(SwitchDataSourceAttribute), true);

      if (switchDataSources?.Length > 0)
      {
        DataSource = switchDataSources[0].DataSource;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public virtual string GetName() => baseProperty.Name;

    public virtual object GetValue() => GetValue(parentTask, propInfo);

    public BaseProperty GetProperty() => baseProperty;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected object GetValue(Task parentTask, PropertyInfo propInfo)
    {
      if (parentTask == null)
      {
        throw new ArgumentNullException(nameof(parentTask));
      }

      if (propInfo == null)
      {
        throw new ArgumentNullException(nameof(propInfo));
      }

      var propertyGetter = propInfo.GetMethod;

      var value = propertyGetter.Invoke(parentTask, Array.Empty<object>());

      var type = propertyGetter.ReturnType;

      if (value == null)
      {
        return null;
      }

      try
      {
        if (Nullable.GetUnderlyingType(type) != null && value == null)
        {
          return null; // defined nullable and is null, so skip.
        }
        else if (type == typeof(string) || Nullable.GetUnderlyingType(type) == typeof(string))
        {
          value ??= string.Empty; // string is a special case with a non-default constructor.
        }
        else if (type == typeof(Array) || Nullable.GetUnderlyingType(type) == typeof(Array))
        {
          value ??= Array.CreateInstance(type.GetElementType(), 0); // create an empty array of the matching return type.
        }
        else if (type == typeof(ITaskItem[]) || Nullable.GetUnderlyingType(type) == typeof(ITaskItem[]))
        {
          value ??= Array.CreateInstance(typeof(ITaskItem), 0);
        }
        else
        {
          value ??= Activator.CreateInstance(type); // create an instance of the return type.
        }
      }
      catch (Exception e)
      {
        parentTask.Log.LogError($"Failed to evaluate Switch value for type: {type} - {e}");

        throw;
      }

      return value;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public string Name
    {
      get => baseProperty.Name;
      set => baseProperty.Name = value;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public string DisplayName
    {
      get => baseProperty.DisplayName;
      set => baseProperty.DisplayName = value;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public string SwitchPrefix
    {
      get => baseProperty.SwitchPrefix;
      set => baseProperty.SwitchPrefix = value;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public string Switch
    {
      get => baseProperty.Switch;
      set => baseProperty.Switch = value;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public string Separator
    {
      get => baseProperty.Separator;
      set => baseProperty.Separator = value;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public bool IncludeInCommandLine
    {
      get => baseProperty.IncludeInCommandLine;
      set => baseProperty.IncludeInCommandLine = value;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public List<Argument> Arguments
    {
      get => baseProperty.Arguments;
      set => baseProperty.Arguments = value;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public List<NameValuePair> Metadata
    {
      get => baseProperty.Metadata;
      set => baseProperty.Metadata = value;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public DataSource DataSource
    {
      get => baseProperty.DataSource;
      set => baseProperty.DataSource = value;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public string Default
    {
      get => baseProperty.Default;
      set => baseProperty.Default = value;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public bool IsRequired
    {
      get => baseProperty.IsRequired;
      set => baseProperty.IsRequired = value;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public bool Visible
    {
      get => baseProperty.Visible;
      set => baseProperty.Visible = value;
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public bool MultipleValuesAllowed
    {
      get => baseProperty.MultipleValuesAllowed;
      set => baseProperty.MultipleValuesAllowed = value;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public bool ReadOnly
    {
      get => baseProperty.ReadOnly;
      set => baseProperty.ReadOnly = value;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public string Subcategory
    {
      get => baseProperty.Subcategory;
      set => baseProperty.Subcategory = value;
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public string Category
    {
      get => baseProperty.Category;
      set => baseProperty.Category = value;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int HelpContext
    {
      get => baseProperty.HelpContext;
      set => baseProperty.HelpContext = value;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public string HelpFile
    {
      get => baseProperty.HelpFile;
      set => baseProperty.HelpFile = value;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public string HelpUrl
    {
      get => baseProperty.HelpUrl;
      set => baseProperty.HelpUrl = value;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public string F1Keyword
    {
      get => baseProperty.F1Keyword;
      set => baseProperty.F1Keyword = value;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public string Description
    {
      get => baseProperty.Description;
      set => baseProperty.Description = value;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public List<ValueEditor> ValueEditors
    {
      get => baseProperty.ValueEditors;
      set => baseProperty.ValueEditors = value;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public Rule ContainingRule
    {
      get => baseProperty.ContainingRule;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }

}
