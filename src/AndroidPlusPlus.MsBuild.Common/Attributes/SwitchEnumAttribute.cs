////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using Microsoft.Build.Framework.XamlTypes;
using Microsoft.Build.Utilities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace AndroidPlusPlus.MsBuild.Common.Attributes
{

  [AttributeUsage(AttributeTargets.Property, AllowMultiple = false, Inherited = true)]
  public class SwitchEnumAttribute : SwitchBaseAttribute
  {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public SwitchEnumAttribute()
      : base(new EnumProperty())
    {
      enumProperty = baseProperty as EnumProperty;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected readonly EnumProperty enumProperty;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public override void Initialize(Task parentTask, PropertyInfo propInfo)
    {
      base.Initialize(parentTask, propInfo);

      var switchEnumValues = (SwitchEnumValueAttribute[]) GetCustomAttributes(propInfo, typeof(SwitchEnumValueAttribute), true);

      enumProperty.AdmissibleValues.AddRange(switchEnumValues.Select(attr => attr.EnumValue));

      if (enumProperty.AdmissibleValues?.Count == 0)
      {
        throw new ArgumentException($"{GetType().Name} requires at least one {typeof(EnumValue).Name}.");
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    // The list of possible values for this property. Must have at least one value.
    public List<EnumValue> AdmissibleValues
    {
      get => enumProperty.AdmissibleValues;
      set => enumProperty.AdmissibleValues = value;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }

}
