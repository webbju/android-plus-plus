////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using AndroidPlusPlus.Common;
using System;
using System.Globalization;
using System.Runtime.InteropServices;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace AndroidPlusPlus.VsIntegratedPackage
{

  [ComVisible (false)]

  [AttributeUsage (AttributeTargets.Class, Inherited = true, AllowMultiple = false)]

  internal class ProvideDebugPortSupplierAttribute : ProvideDebugBaseAttribute
  {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    private readonly Guid m_portSupplierIdGuid;

    private readonly string m_portSupplierName;

    private readonly Type m_portSupplierType;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public ProvideDebugPortSupplierAttribute (string idGuidString, string name, Type portSupplierType)
      : base ()
    {
      m_portSupplierIdGuid = new Guid (idGuidString);

      m_portSupplierName = name;

      m_portSupplierType = portSupplierType;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected override string GetParentKey ()
    {
      return string.Format (CultureInfo.InvariantCulture, @"AD7Metrics\PortSupplier\{0}", m_portSupplierIdGuid.ToString ("B"));
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected override void RegisterWithKey (object regKey, Type regKeyType)
    {
      //
      // Unified registration functionality for accepting both RegistrationAttribute.Key and RegistryKey objects.
      //

      try
      {
        var regKeySetValue = regKeyType.GetMethod ("SetValue", new [] { typeof (string), typeof (object) }) ?? throw new InvalidOperationException ();

        var regKeyClose = regKeyType.GetMethod("Close") ?? throw new InvalidOperationException ();

        regKeySetValue.Invoke (regKey, new object [] { string.Empty, m_portSupplierType.AssemblyQualifiedName });

        regKeySetValue.Invoke (regKey, new object [] { "CLSID", m_portSupplierType.GUID.ToString ("B") });

        regKeySetValue.Invoke (regKey, new object [] { "Name", m_portSupplierName });

        regKeyClose.Invoke (regKey, null);
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }

}
