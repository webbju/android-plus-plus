////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using Microsoft.VisualStudio.Debugger.Interop;
using Microsoft.VisualStudio.Shell;
using Microsoft.Win32;

using AndroidPlusPlus.Common;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace AndroidPlusPlus.VsIntegratedPackage
{

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  [ComVisible (false)]

  [AttributeUsage (AttributeTargets.Class, Inherited = true, AllowMultiple = false)]

  internal class ProvideDebugExtensionAttribute : ProvideDebugBaseAttribute
  {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    private readonly Guid m_engineIdGuid;

    private readonly string m_groupName;

    private readonly uint m_groupCode;

    private readonly uint m_groupState;

    private Dictionary<string, ExtensionSpec> m_groupExtensions = new Dictionary<string, ExtensionSpec> ();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public class ExtensionSpec
    {
      public ExtensionSpec (string name, uint code, uint state)
      {
        Name = name;

        Code = code;

        State = state;
      }

      public string Name { get; protected set; }

      public uint Code { get; protected set; }

      public uint State { get; protected set; }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public ProvideDebugExtensionAttribute (string idGuidString, string groupName, uint groupCode, uint groupState)
      : base ()
    {
      m_engineIdGuid = new Guid (idGuidString);

      m_groupName = groupName;

      m_groupCode = groupCode;

      m_groupState = groupState;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected override string GetParentKey ()
    {
      return string.Format (CultureInfo.InvariantCulture, @"AD7Metrics\Exception\{0}\{1}", m_engineIdGuid.ToString ("B"), m_groupName);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected override void RegisterWithKey (object regKey, Type regKeyType)
    {
      //
      // Unified registration functionality for accepting both RegistrationAttribute.Key and RegistryKey objects.
      //

      try
      {
        var regKeySetValue = regKeyType.GetMethod ("SetValue", new [] { typeof (string), typeof (object) }) ?? throw new InvalidOperationException ();

        var regKeyCreateSubKey = regKeyType.GetMethod ("CreateSubKey", new [] { typeof (string), typeof (RegistryKeyPermissionCheck) });

        var regKeyClose = regKeyType.GetMethod ("Close") ?? throw new InvalidOperationException ();

        bool createSubKeyRequiresPermission = true;

        if (regKeyCreateSubKey == null)
        {
          regKeyCreateSubKey = regKeyType.GetMethod ("CreateSubkey") ?? throw new InvalidOperationException ();

          createSubKeyRequiresPermission = false;
        }

        regKeySetValue.Invoke (regKey, new object [] { "Code", m_groupCode });

        regKeySetValue.Invoke (regKey, new object [] { "State", m_groupState });

        foreach (KeyValuePair<string, ExtensionSpec> entry in m_groupExtensions)
        {
          string exceptionName = entry.Key;

          object regSubKey = null;

          if (createSubKeyRequiresPermission)
          {
            regSubKey = regKeyCreateSubKey.Invoke (regKey, new object [] { exceptionName, RegistryKeyPermissionCheck.ReadWriteSubTree });
          }
          else
          {
            regSubKey = regKeyCreateSubKey.Invoke (regKey, new object [] { exceptionName });
          }

          if (regSubKey != null)
          {
            regKeySetValue.Invoke (regSubKey, new object [] { "Code", entry.Value.Code });

            regKeySetValue.Invoke (regSubKey, new object [] { "State", entry.Value.State });

            regKeyClose.Invoke (regSubKey, null);
          }
        }

        regKeyClose.Invoke (regKey, null);
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public string [] GroupExtensions
    {
      get
      {
        return null;
      }
      set
      {
        foreach (string extension in value)
        {
          string [] specification = extension.Split (new char [] { '|' });

          string name = specification [0];

          uint code = uint.Parse (specification [1].Substring (2), NumberStyles.HexNumber);

          uint state = uint.Parse (specification [2].Substring (2), NumberStyles.HexNumber | NumberStyles.AllowHexSpecifier);

          m_groupExtensions [name] = new ExtensionSpec (name, code, state);
        }
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
