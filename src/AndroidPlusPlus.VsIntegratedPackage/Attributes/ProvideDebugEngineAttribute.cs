////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using Microsoft.VisualStudio.Shell;
using Microsoft.Win32;

using AndroidPlusPlus.Common;
using AndroidPlusPlus.VsDebugCommon;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace AndroidPlusPlus.VsIntegratedPackage
{
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  [ComVisible (false)]

  [AttributeUsage (AttributeTargets.Class, Inherited = true, AllowMultiple = false)]

  internal class ProvideDebugEngineAttribute : ProvideDebugBaseAttribute
  {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    private readonly Guid m_engineIdGuid;

    private readonly string m_engineName;

    private readonly Type m_engineType;

    private Hashtable m_engineIncompatibleIds = new Hashtable ();

    private List<Guid> m_enginePortSupplierIds = new List<Guid>();

    private Hashtable m_engineOptions = new Hashtable ();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public ProvideDebugEngineAttribute (string idGuidString, string name, Type engineType)
      : base ()
    {
      m_engineIdGuid = new Guid (idGuidString);

      m_engineName = name;

      m_engineType = engineType;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected override string GetParentKey ()
    {
      return string.Format (CultureInfo.InvariantCulture, @"AD7Metrics\Engine\{0}", m_engineIdGuid.ToString ("B"));
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected override void RegisterWithKey (object regKey, Type regKeyType)
    {
      //
      // Unified registration functionality for accepting both RegistrationAttribute.Key and RegistryKey objects.
      //

      try
      {
        var regKeySetValue = regKeyType.GetMethod ("SetValue", new [] { typeof (string), typeof (object) }) ?? throw new InvalidOperationException ();

        var regKeyCreateSubKey = regKeyType.GetMethod ("CreateSubKey", new [] {typeof (string), typeof (RegistryKeyPermissionCheck)});

        var regKeyClose = regKeyType.GetMethod ("Close") ?? throw new InvalidOperationException ();

        bool createSubKeyRequiresPermission = true;

        if (regKeyCreateSubKey == null)
        {
          regKeyCreateSubKey = regKeyType.GetMethod ("CreateSubkey") ?? throw new InvalidOperationException ();

          createSubKeyRequiresPermission = false;
        }

        regKeySetValue.Invoke (regKey, new object [] { string.Empty, m_engineType.AssemblyQualifiedName });

        regKeySetValue.Invoke (regKey, new object [] { "CLSID", m_engineType.GUID.ToString ("B") });

        regKeySetValue.Invoke (regKey, new object [] { "Name", m_engineName });

        foreach (object engineKey in m_engineIncompatibleIds.Keys)
        {
          string engineName = engineKey.ToString ();

          object engineGuid = m_engineIncompatibleIds [engineKey];

          object regSubKey = null;

          if (createSubKeyRequiresPermission)
          {
            regSubKey = regKeyCreateSubKey.Invoke (regKey, new object [] { "IncompatibleList", RegistryKeyPermissionCheck.ReadWriteSubTree });
          }
          else
          {
            regSubKey = regKeyCreateSubKey.Invoke (regKey, new object [] { "IncompatibleList" });
          }

          if (regSubKey != null)
          {
            regKeySetValue.Invoke (regSubKey, new object [] { engineName, ((Guid)engineGuid).ToString ("B") });

            regKeyClose.Invoke (regSubKey, null);
          }
        }

        //
        // If there's more than one PortSupplier, add each Guid to a listing as a subkey of the Engine parent.
        // Otherwise, just add a single value entry.
        //

        for (int i = 0; i < m_enginePortSupplierIds.Count; ++i)
        {
          string supplierName = i.ToString (); // just use the index

          Guid supplierGuid = m_enginePortSupplierIds [i];

          if (m_enginePortSupplierIds.Count > 1)
          {
            object regSubKey = null;

            if (createSubKeyRequiresPermission)
            {
              regSubKey = regKeyCreateSubKey.Invoke (regKey, new object [] { @"PortSupplier", RegistryKeyPermissionCheck.ReadWriteSubTree });
            }
            else
            {
              regSubKey = regKeyCreateSubKey.Invoke (regKey, new object [] { @"PortSupplier" });
            }

            if (regSubKey != null)
            {
              regKeySetValue.Invoke (regSubKey, new object [] { supplierName, supplierGuid.ToString ("B") });

              regKeyClose.Invoke (regSubKey, null);
            }
          }
          else if (m_enginePortSupplierIds.Count == 1)
          {
            regKeySetValue.Invoke (regKey, new object [] { "PortSupplier", supplierGuid.ToString ("B") });
          }
        }

        //
        // Iterate through additional properties and translate their values to registry compatible formats.
        //

        foreach (object key in m_engineOptions.Keys)
        {
          string keyName = key.ToString ();

          object keyData = m_engineOptions [key];

          if (keyData != null)
          {
            if ((keyData is Type) && ((keyData as Type).GUID != Guid.Empty))
            {
              regKeySetValue.Invoke (regKey, new object [] { keyName, (keyData as Type).GUID.ToString ("B") });
            }
            else if (keyData.GetType ().IsPrimitive)
            {
              regKeySetValue.Invoke (regKey, new object [] { keyName, Convert.ToInt32 (keyData) });
            }
            else
            {
              string keyDataString = keyData.ToString ();

              if (!string.IsNullOrEmpty(keyDataString))
              {
                regKeySetValue.Invoke (regKey, new object [] { keyName, keyDataString.Replace(@"\", @"\\") });
              }
            }
          }
        }

        regKeyClose.Invoke (regKey, null);
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public string [] IncompatibleList
    {
      get
      {
        return null;
      }
      set
      {
        foreach (string engineId in value)
        {
          Guid incompatibleEngineGuid = new Guid (engineId);

          string debugEngineName = DebugEngineGuids.GetEngineNameFromId (incompatibleEngineGuid);

          m_engineIncompatibleIds [debugEngineName] = incompatibleEngineGuid;
        }
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public string [] PortSupplier
    {
      get
      {
        return null;
      }
      set
      {

        foreach (string supplierId in value)
        {
          bool conflict = false;

          Guid supplierGuid = new Guid (supplierId);

          for (int i = 0; i < m_enginePortSupplierIds.Count; ++i)
          {
            if (m_enginePortSupplierIds [i].Equals (supplierGuid))
            {
              conflict = true;

              break;
            }
          }

          if (!conflict)
          {
            m_enginePortSupplierIds.Add (supplierGuid);
          }
        }
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /// <summary>Set to nonzero to indicate support for address breakpoints.</summary>
    public bool AddressBP
    {
      get
      {
        object val = m_engineOptions["AddressBP"];

        return (null == val) ? false : (bool)val;
      }
      set
      {
        m_engineOptions["AddressBP"] = value;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /// <summary>Set to nonzero in order to always load the debug engine locally.</summary>
    public bool AlwaysLoadLocal
    {
      get
      {
        object val = m_engineOptions["AlwaysLoadLocal"];

        return (null == val) ? false : (bool)val;
      }
      set
      {
        m_engineOptions["AlwaysLoadLocal"] = value;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /// <summary>Set to nonzero to indicate that the debug engine will always be loaded with or by the program being debugged.</summary>
    public bool LoadedByDebuggee
    {
      get
      {
        object val = m_engineOptions["LoadedByDebuggee"];

        return (null == val) ? false : (bool)val;
      }
      set
      {
        m_engineOptions["LoadedByDebuggee"] = value;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /// <summary>Set to nonzero to indicate support for attachment to existing programs.</summary>
    public bool Attach
    {
      get
      {
        object val = m_engineOptions["Attach"];

        return (null == val) ? false : (bool)val;
      }
      set
      {
        m_engineOptions["Attach"] = value;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

      /// <summary>Set to nonzero to indicate support for call stack breakpoints.</summary>
      public bool CallStackBP
      {
        get
        {
          object val = m_engineOptions["CallStackBP"];

          return (null == val) ? false : (bool)val;
        }
        set
        {
          m_engineOptions["CallStackBP"] = value;
        }
      }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

      /// <summary>Set to nonzero to indicate support for the setting of conditional breakpoints.</summary>
      public bool ConditionalBP
      {
        get
        {
          object val = m_engineOptions["ConditionalBP"];

          return (null == val) ? false : (bool)val;
        }
        set
        {
          m_engineOptions["ConditionalBP"] = value;
        }
      }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

      /// <summary>Set to nonzero to indicate support for the setting of breakpoints on changes in data.</summary>
      public bool DataBP
      {
        get
        {
          object val = m_engineOptions["DataBP"];

          return (null == val) ? false : (bool)val;
        }
        set
        {
          m_engineOptions["DataBP"] = value;
        }
      }

      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

      /// <summary>Set to nonzero to indicate support for the production of a disassembly listing.</summary>
      public bool Disassembly
      {
        get
        {
          object val = m_engineOptions["Disassembly"];

          return (null == val) ? false : (bool)val;
        }
        set
        {
          m_engineOptions["Disassembly"] = value;
        }
      }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

      /// <summary>Set to nonzero to indicate support for dump writing (the dumping of memory to an output device).</summary>
      public bool DumpWriting
      {
        get
        {
          object val = m_engineOptions["DumpWriting"];

          return (null == val) ? false : (bool)val;
        }
        set
        {
          m_engineOptions["DumpWriting"] = value;
        }
      }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /// <summary>Set to nonzero to indicate support for exceptions.</summary>
    public bool Exceptions
    {
      get
      {
        object val = m_engineOptions["Exceptions"];

        return (null == val) ? false : (bool)val;
      }
      set
      {
        m_engineOptions["Exceptions"] = value;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /// <summary>Set to nonzero to indicate support for named breakpoints (breakpoints that break when a certain function name is called).</summary>
    public bool FunctionBP
    {
      get
      {
        object val = m_engineOptions["FunctionBP"];

        return (null == val) ? false : (bool)val;
      }
      set
      {
        m_engineOptions["FunctionBP"] = value;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /// <summary>Set to nonzero to indicate support for the setting of "hit point" breakpoints (breakpoints that are triggered only after being hit a certain number of times).</summary>
    public bool HitCountBP
    {
      get
      {
        object val = m_engineOptions["HitCountBP"];

        return (null == val) ? false : (bool)val;
      }
      set
      {
        m_engineOptions["HitCountBP"] = value;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /// <summary>Set to nonzero to indicate support for just-in-time debugging (the debugger is launched when an exception occurs in a running process).</summary>
    public bool JITDebug
    {
      get
      {
        object val = m_engineOptions["JITDebug"];

        return (null == val) ? false : (bool)val;
      }
      set
      {
        m_engineOptions["JITDebug"] = value;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /// <summary>Set to nonzero to indicate support for setting the next statement (which skips execution of intermediate statements).</summary>
    public bool SetNextStatement
    {
      get
      {
        object val = m_engineOptions["SetNextStatement"];

        return (null == val) ? false : (bool)val;
      }
      set
      {
        m_engineOptions["SetNextStatement"] = value;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /// <summary>Set to nonzero to indicate support for suspending thread execution.</summary>
    public bool SuspendThread
    {
      get
      {
        object val = m_engineOptions["SuspendThread"];

        return (null == val) ? false : (bool)val;
      }
      set
      {
        m_engineOptions["SuspendThread"] = value;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /// <summary>Set to nonzero to indicate that the user should be notified if there are no symbols.</summary>
    public bool WarnIfNoSymbols
    {
      get
      {
        object val = m_engineOptions["WarnIfNoSymbols"];

        return (null == val) ? false : (bool)val;
      }
      set
      {
        m_engineOptions["WarnIfNoSymbols"] = value;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /// <summary>Set this to the CLSID of the program provider.</summary>
    public Type ProgramProvider
    {
      get
      {
        object val = m_engineOptions["ProgramProvider"];

        return (null == val) ? null : (Type)val;
      }
      set
      {
        m_engineOptions["ProgramProvider"] = value;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /// <summary>Set this to nonzero to indicate that the program provider should always be loaded locally.</summary>
    public bool AlwaysLoadProgramProviderLocal
    {
      get
      {
        object val = m_engineOptions["AlwaysLoadProgramProviderLocal"];

        return (null == val) ? false : (bool)val;
      }
      set
      {
        m_engineOptions["AlwaysLoadProgramProviderLocal"] = value;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /// <summary>Set this to nonzero to indicate that the debug engine will watch for process events instead of the program provider.</summary>
    public bool EngineCanWatchProcess
    {
      get
      {
        object val = m_engineOptions["EngineCanWatchProcess"];

        return (null == val) ? false : (bool)val;
      }
      set
      {
        m_engineOptions["EngineCanWatchProcess"] = value;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /// <summary>Set this to nonzero to indicate support for remote debugging.</summary>
    public bool RemoteDebugging
    {
      get
      {
        object val = m_engineOptions["RemoteDebugging"];

        return (null == val) ? false : (bool)val;
      }
      set
      {
        m_engineOptions["RemoteDebugging"] = value;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /// <summary>Set this to nonzero to indicate that the debug engine should be loaded in the debuggee process under WOW when debugging a 64-bit process; otherwise, the debug engine will be loaded in the Visual Studio process (which is running under WOW64).</summary>
    public bool LoadUnderWOW64
    {
      get
      {
        object val = m_engineOptions["LoadUnderWOW64"];

        return (null == val) ? false : (bool)val;
      }
      set
      {
        m_engineOptions["LoadUnderWOW64"] = value;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /// <summary>Set this to nonzero to indicate that the program provider should be loaded in the debuggee process when debugging a 64-bit process under WOW; otherwise, it will be loaded in the Visual Studio process.</summary>
    public bool LoadProgramProviderUnderWOW64
    {
        get
        {
            object val = m_engineOptions["LoadProgramProviderUnderWOW64"];

            return (null == val) ? false : (bool)val;
        }
        set
        {
          m_engineOptions ["LoadProgramProviderUnderWOW64"] = value;
        }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /// <summary>Set this to nonzero to indicate that the process should stop if an unhandled exception is thrown across managed/unmanaged code boundaries.</summary>
    public bool StopOnExceptionCrossingManagedBoundary
    {
      get
      {
        object val = m_engineOptions["StopOnExceptionCrossingManagedBoundary"];

        return (null == val) ? false : (bool)val;
      }
      set
      {
        m_engineOptions["StopOnExceptionCrossingManagedBoundary"] = value;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /// <summary>Set this to a priority for automatic selection of the debug engine (higher values equals higher priority).</summary>
    public int AutoSelectPriority
    {
      get
      {
        object val = m_engineOptions["AutoSelectPriority"];

        return (null == val) ? 0 : (int)val;
      }
      set
      {
        m_engineOptions["AutoSelectPriority"] = value;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /// <summary>Set this to nonzero to indicate that just-in-time optimizations (for managed code) should be disabled during debugging.</summary>
    public bool DisableJITOptimization
    {
      get
      {
        object val = m_engineOptions["DisableJITOptimization"];

        return (null == val) ? false : (bool)val;
      }
      set
      {
        m_engineOptions["DisableJITOptimization"] = value;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
