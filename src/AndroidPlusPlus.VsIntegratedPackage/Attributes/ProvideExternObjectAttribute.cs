////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using Microsoft.VisualStudio.Shell;
using Microsoft.Win32;

using AndroidPlusPlus.Common;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace AndroidPlusPlus.VsIntegratedPackage
{
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  [ComVisible (false)]

  [AttributeUsage (AttributeTargets.Class, Inherited = true, AllowMultiple = true)]

  public class ProvideExternObjectAttribute : RegistrationAttribute
  {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    private Guid m_clsIdGuid;

    private string m_qualifiedName;

    private string m_inprocServerPath;

    private string m_fullClassName;

    private string m_codeBasePath;

    private string m_threadingModel;

    private string m_assemblyPath;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public ProvideExternObjectAttribute (Type objectType)
      : base ()
    {
      m_clsIdGuid = objectType.GUID;

      m_qualifiedName = objectType.AssemblyQualifiedName;

      m_inprocServerPath = string.Empty;

      m_fullClassName = objectType.FullName;

      m_codeBasePath = "$PackageFolder$\\" + Path.GetFileName (objectType.Assembly.CodeBase);

      m_threadingModel = "Both"; // Is this important?

      m_assemblyPath = objectType.Assembly.ToString ();
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public ProvideExternObjectAttribute (Guid clsidGuid, string qualifiedName, string inprocServerPath, string fullClassName, string codeBasePath, string threadingModel, string assemblyPath)
      : base ()
    {
      m_clsIdGuid = clsidGuid;

      m_qualifiedName = qualifiedName;

      m_inprocServerPath = inprocServerPath;

      m_fullClassName = fullClassName;

      m_codeBasePath = codeBasePath;

      m_threadingModel = threadingModel;

      m_assemblyPath = assemblyPath;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public string CLSIDKey
    {
      get
      {
        return string.Format (CultureInfo.InvariantCulture, @"CLSID\{0}", m_clsIdGuid.ToString ("B"));
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public override void Register (RegistrationAttribute.RegistrationContext context)
    {
      using (RegistrationAttribute.Key regKey = context.CreateKey (CLSIDKey))
      {
        RegisterWithKey (regKey, regKey.GetType (), context.InprocServerPath, context.CodeBase);
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public void Register (RegistryKey rootKey)
    {
      try
      {
        using (RegistryKey regKey = rootKey.CreateSubKey (CLSIDKey, RegistryKeyPermissionCheck.ReadWriteSubTree))
        {
          string packagePath = Path.GetDirectoryName (Assembly.GetExecutingAssembly ().Location);

          RegisterWithKey (regKey, regKey.GetType (), Environment.SystemDirectory + @"\MSCOREE.DLL", packagePath); // This may to reference the 64bit equivilent, in Windows\SysWow64\ at some point.
        }
      }
      catch (UnauthorizedAccessException e)
      {
        LoggingUtils.HandleException (e);
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    private void RegisterWithKey (object regKey, Type regKeyType, string inprocServerPath, string codeBasePath)
    {
      //
      // Unified registration functionality for accepting both RegistrationAttribute.Key and RegistryKey objects.
      //

      try
      {
        var regKeySetValue = regKeyType.GetMethod ("SetValue", new [] { typeof (string), typeof (object) }) ?? throw new InvalidOperationException ();

        var regKeyClose = regKeyType.GetMethod ("Close") ?? throw new InvalidOperationException ();

        if (!string.IsNullOrWhiteSpace(m_inprocServerPath))
        {
          inprocServerPath = m_inprocServerPath;
        }

        if (!string.IsNullOrWhiteSpace(m_codeBasePath))
        {
          codeBasePath = m_codeBasePath;
        }

        if (!string.IsNullOrWhiteSpace (m_qualifiedName))
        {
          regKeySetValue.Invoke (regKey, new object[] { string.Empty, m_qualifiedName });
        }

        regKeySetValue.Invoke (regKey, new object [] { "Class", m_fullClassName });

        if (!string.IsNullOrWhiteSpace(inprocServerPath))
        {
          regKeySetValue.Invoke(regKey, new object[] { "InprocServer32", inprocServerPath }); // This may to reference the 64bit equivilent, in Windows\SysWow64\ at some point.
        }

        if (!string.IsNullOrWhiteSpace(codeBasePath))
        {
          regKeySetValue.Invoke(regKey, new object[] { "CodeBase", codeBasePath });
        }

        if (!string.IsNullOrWhiteSpace (m_assemblyPath))
        {
          regKeySetValue.Invoke(regKey, new object[] { "Assembly", m_assemblyPath });
        }

        if (!string.IsNullOrWhiteSpace(m_threadingModel))
        {
          regKeySetValue.Invoke(regKey, new object[] { "ThreadingModel", m_threadingModel });
        }

        regKeyClose.Invoke (regKey, null);
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public override void Unregister (RegistrationAttribute.RegistrationContext context)
    {
      context.RemoveKey (CLSIDKey);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public void Unregister (RegistryKey rootKey)
    {
      rootKey.DeleteSubKeyTree (CLSIDKey);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
