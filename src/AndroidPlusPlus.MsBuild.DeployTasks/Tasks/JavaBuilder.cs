////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Diagnostics;
using System.Text;
using System.IO;
using System.Reflection;
using System.Resources;

using Microsoft.Build.Framework;
using Microsoft.Win32;
using Microsoft.Build.Utilities;

using AndroidPlusPlus.MsBuild.Common;
using AndroidPlusPlus.Common;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace AndroidPlusPlus.MsBuild.DeployTasks.Tasks
{

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  public class JavaBuilder : TrackedOutOfDateToolTask, ITask
  {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    HashSet<string> m_outputClassPackages;

    List<ITaskItem> m_outputClassSourceFiles;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public JavaBuilder ()
      : base (new ResourceManager ("AndroidPlusPlus.MsBuild.DeployTasks.Properties.Resources", Assembly.GetExecutingAssembly ()))
    {
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    [Required]
    public string JavaHomeDir { get; set; }

    public ITaskItem OutputJar { get; set; }

    public ITaskItem ManifestFile { get; set; }

    [Output]
    public ITaskItem [] OutputClassPaths { get; set; }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected override bool Setup ()
    {
      if (base.Setup ())
      {
        m_outputClassPackages = new HashSet<string> ();

        m_outputClassSourceFiles = new List<ITaskItem> ();

        return true;
      }

      return false;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected override int TrackedExecuteTool (string pathToTool, string responseFileCommands, string commandLineCommands)
    {
      int retCode = -1;

      try
      {
        m_outputClassPackages.Clear ();

        m_outputClassSourceFiles.Clear ();

        retCode = base.TrackedExecuteTool (pathToTool, responseFileCommands, commandLineCommands);
      }
      catch (Exception e)
      {
        Log.LogErrorFromException (e, true);

        retCode = -1;
      }
      finally
      {
        if (retCode == 0)
        {
          // 
          // Export listing of compiled .class outputs and the default class path.
          // 

          string defaultClassPath = Sources [0].GetMetadata ("ClassOutputDirectory");

          ITaskItem defaultClassPathItem = new TaskItem (defaultClassPath);

          defaultClassPathItem.SetMetadata ("ClassPaths", defaultClassPath);

          OutputClassPaths = new ITaskItem [] { defaultClassPathItem };

          if (OutputJar != null)
          {
            m_outputClassSourceFiles.Add (OutputJar); // Additional output.
          }

          OutputFiles = m_outputClassSourceFiles.ToArray ();

        }
      }

      return retCode;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected override void TrackedExecuteToolOutput (KeyValuePair<string, List<ITaskItem>> commandAndSourceFiles, string singleLine)
    {
      try
      {
        // 
        // Intercept output class filenames and package addresses
        // .
        // e.g.
        //  [checking com.example.nativemedia.MyRenderer]
        //  [wrote AndroidMT\Debug\bin\classes\com\example\nativemedia\MyRenderer.class]
        // 

        if (string.IsNullOrWhiteSpace (singleLine))
        {
          return;
        }
        else if (singleLine.StartsWith ("["))
        {
          if (Sources [0].GetMetadata ("Verbose") == "true")
          {
            LogEventsFromTextOutput (string.Format ("[{0}] {1}", ToolName, singleLine), MessageImportance.High);
          }

          string sanitisedOutput = singleLine.Trim (new char [] { ' ', '[', ']' });

          if (sanitisedOutput.StartsWith ("checking "))
          {
            string packageNameWithClassName = sanitisedOutput.Substring ("checking ".Length);

            string packageNameWithoutClass = packageNameWithClassName.Substring (0, packageNameWithClassName.LastIndexOf ('.'));

            if (!m_outputClassPackages.Contains (packageNameWithoutClass))
            {
              m_outputClassPackages.Add (packageNameWithoutClass);
            }
          }
          else if (sanitisedOutput.StartsWith ("wrote "))
          {
            string fileWritten = sanitisedOutput.Substring ("wrote ".Length);

            fileWritten = StripFileObjectDescriptor (fileWritten);

            ITaskItem classFileItem = new TaskItem (fileWritten);

            classFileItem.SetMetadata ("ClassOutputDirectory", Sources [0].GetMetadata ("ClassOutputDirectory"));

            m_outputClassSourceFiles.Add (classFileItem);
          }
        }
        else
        {
          // 
          // Java output differs from a Visual Studio's "jump to line" format, we transform that output here.
          // 

          LogEventsFromTextOutput (JavaUtilities.ConvertJavaOutputToVS (singleLine), MessageImportance.High);
        }
      }
      catch (Exception e)
      {
        Log.LogErrorFromException (e, true);
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected override string GenerateCommandLineCommands ()
    {
      // 
      // Build a command-line based on parsing switches from the registered property sheet, and any additional flags.
      // 

      StringBuilder builder = new StringBuilder (PathUtils.CommandLineLength);

      builder.Append (string.Format ("  --jdk-home {0} ", PathUtils.QuoteIfNeeded (JavaHomeDir)));

      if (OutputJar != null)
      {
        builder.Append (string.Format (" --jar-output {0} ", PathUtils.QuoteIfNeeded (OutputJar.GetMetadata ("FullPath"))));
      }

      if (ManifestFile != null)
      {
        builder.Append (string.Format (" --jar-manifest {0} ", PathUtils.QuoteIfNeeded (ManifestFile.GetMetadata ("FullPath"))));
      }

      return builder.ToString ();
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected override string GenerateResponseFileCommands ()
    {
      try
      {
        StringBuilder builder = new StringBuilder ();

        builder.Append (" -verbose ");

        builder.Append (string.Format (" {0} ", m_parsedProperties.Parse (Sources [0])));

        foreach (ITaskItem source in Sources)
        {
          builder.Append (string.Format (" {0} ", PathUtils.QuoteIfNeeded (source.GetMetadata ("Identity")) + " "));
        }

        return builder.ToString ();
      }
      catch (Exception e)
      {
        Log.LogErrorFromException (e, true);
      }

      return string.Empty;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected override string GetResponseFileSwitch (string responseFilePath)
    {
      return '@' + PathUtils.SantiseWindowsPath (responseFilePath);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    private static string StripFileObjectDescriptor (string fileObjectDescription)
    {
      // 
      // Convert from JDK 7-style verbose file output to the raw filename.
      // 
      // e.g: [wrote RegularFileObject[..\..\build\obj\android\vs10.0\NMG_System\debug_no_assets\bin\classes\com\google\android\gms\R$attr.class]]
      // 

      int filenameStart = fileObjectDescription.LastIndexOf ('[');

      if (filenameStart != -1)
      {
        fileObjectDescription = fileObjectDescription.Substring (filenameStart).Trim (new char [] { '[', ']' });
      }

      return fileObjectDescription;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected override void AddTaskSpecificDependencies (ref TrackedFileManager trackedFileManager, ITaskItem [] sources)
    {
      if (ManifestFile != null)
      {
        trackedFileManager.AddDependencyForSources (new ITaskItem [] { ManifestFile }, sources);
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected override void AddTaskSpecificOutputFiles (ref TrackedFileManager trackedFileManager, ITaskItem [] sources)
    {
      trackedFileManager.AddDependencyForSources (m_outputClassSourceFiles.ToArray (), sources);

      if (OutputJar != null)
      {
        trackedFileManager.AddDependencyForSources (new ITaskItem [] { OutputJar }, sources);
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected override bool AppendSourcesToCommandLine
    {
      get
      {
        return false;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected override string ToolName
    {
      get
      {
        return "JavaBuilder";
      }
    }

  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
