////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Text;
using System.IO;
using System.Reflection;
using System.Resources;

using Microsoft.Build.Framework;
using Microsoft.Win32;
using Microsoft.Build.Utilities;

using AndroidPlusPlus.MsBuild.Common;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace AndroidPlusPlus.MsBuild.DeployTasks
{

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  public class AndroidAidl : TrackedOutOfDateToolTask, ITask
  {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public AndroidAidl ()
      : base (new ResourceManager ("AndroidPlusPlus.MsBuild.DeployTasks.Properties.Resources", Assembly.GetExecutingAssembly ()))
    {
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    [Output]
    public string [] OutputIntermediateFiles { get; set; }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /*protected override int ExecuteTool (string pathToTool, string responseFileCommands, string commandLineCommands)
    {
      if (!File.Exists (pathToTool))
      {
        Log.LogError (string.Format ("[{0}] Couldn't locate target tool: ", ToolName, pathToTool), MessageImportance.High);

        return -1;
      }

      // 
      // Parse list of pending compilation sources, creating a dictionary paired with their respective package addresses.
      // 

      Dictionary<ITaskItem, string> aidlSourcePackagePairs = new Dictionary<ITaskItem, string> ();

      foreach (ITaskItem source in Sources)
      {
        string sourceFilePath = Path.GetFullPath (source.GetMetadata ("FullPath"));

        using (StreamReader reader = new StreamReader (sourceFilePath))
        {
          string line = string.Empty;

          while ((line = reader.ReadLine ()) != null)
          {
            int matchCharIndex = line.IndexOf ("package ");

            if (matchCharIndex >= 0)
            {
              string package = line.Substring (matchCharIndex + "package ".Length);

              string sanitisedPackage = package.Substring (0, package.Length - 1).Trim (); // remove trailing ; and trim.

              aidlSourcePackagePairs.Add (source, sanitisedPackage);

              break;
            }
          }

          reader.Close ();
        }
      }

      int errorCode = base.ExecuteTool (pathToTool, responseFileCommands, commandLineCommands);

      if (errorCode == 0)
      {
        // 
        // On success, locate the exported (.aidl -> .java) sources - which are placed in a package directory structure in the output folder.
        // 

        List<string> exportedJavaSources = new List<string> ();

        foreach (KeyValuePair<ITaskItem, string> keyPair in aidlSourcePackagePairs)
        {
          string sourceFileName = Path.GetFileName (keyPair.Key.GetMetadata ("FullPath"));

          string sourcePackagePath = Path.Combine (keyPair.Key.GetMetadata ("OutputFolder"), keyPair.Value.Replace ('.', '\\'));

          string sourcePackageExportedSourcePath = Path.Combine (sourcePackagePath, Path.ChangeExtension (sourceFileName, ".java"));

          if (File.Exists (sourcePackageExportedSourcePath))
          {
            exportedJavaSources.Add (sourcePackageExportedSourcePath);
          }
        }

        OutputIntermediateFiles = exportedJavaSources.ToArray ();
      }

      return errorCode;
    }*/

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected override string ToolName
    {
      get
      {
        return "AndroidAidl";
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
