////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using AndroidPlusPlus.MsBuild.Common;
using AndroidPlusPlus.MsBuild.Common.Attributes;
using Microsoft.Build.Framework;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Resources;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace AndroidPlusPlus.MsBuild.DeployTasks
{

  public class AndroidProguard : TrackedOutOfDateToolTask
  {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public AndroidProguard ()
      : base (new ResourceManager ("AndroidPlusPlus.MsBuild.DeployTasks.Properties.Resources", Assembly.GetExecutingAssembly ()))
    {
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    [SwitchString(Switch = "-Xms")]
    public string JvmInitialHeapSize { get; set; } = "32m";

    [SwitchString(Switch = "-Xmx")]
    public string JvmMaximumHeapSize { get; set; } = "1024m";

    [SwitchString(Switch = "-Xss")]
    public string JvmThreadStackSize { get; set; } = "1m";

    [Required]
    [SwitchString(Switch = "-jar", Separator = " ")]
    public string JvmJar { get; set; }

    [SwitchStringList(Subtype = "file", Switch = "-include", Separator = " ")]
    public ITaskItem[] IncludeScripts { get; set; }

    [SwitchStringList(Subtype = "file", Switch = "-libraryjars", Separator = " ")]
    public ITaskItem[] LibraryJars { get; set; }

    // Inputs used for tracking, but skipped on the command line in favour of InJarsWithFilters.
    [Required]
    [SwitchStringList(Subtype = "file", Switch = "-injars", Separator = " ", IncludeInCommandLine = false)]
    public ITaskItem[] InJars { get; set; }

    // Faciliate include specifications. I.e. class.jar(!META-INF/**.*,**.class,!**.class.d)')
    [SwitchStringList(Switch = "-injars", Separator = " ")]
    public string[] InJarsWithFilters => InJars.Select(ti => $"{ti.GetMetadata("FullPath")}({ti.GetMetadata("FileFilters")})").ToArray();

    [Required]
    [Output]
    [SwitchStringList(IsRequired = true, Subtype = "file", Switch = "-outjars", Separator = " ")]
    public ITaskItem[] OutJars { get; set; }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected override bool ValidateParameters()
    {
      var inputFiles = new List<ITaskItem>();
      
      if (InJars != null)
      {
        inputFiles.AddRange(InJars);
      }

      InputFiles = inputFiles.ToArray();

      return base.ValidateParameters();
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected override string GenerateResponseFileCommands()
    {
      return string.Empty; // Bundled Proguard 5.2 doesn't support @ syntax for importing command files.
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }

}
