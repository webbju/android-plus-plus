////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Diagnostics;
using Microsoft.VisualStudio.Debugger.Interop;
using AndroidPlusPlus.Common;
using AndroidPlusPlus.VsDebugCommon;
using Constants = AndroidPlusPlus.VsDebugCommon.Constants;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace AndroidPlusPlus.VsDebugEngine
{

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  public class CLangDebuggeeBreakpointBound : DebuggeeBreakpointBound
  {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    private readonly CLangDebugger m_debugger;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public CLangDebuggeeBreakpointBound (CLangDebugger debugger, DebugBreakpointManager breakpointManager, DebuggeeBreakpointPending pendingBreakpoint, DebuggeeCodeContext codeContext, MiBreakpoint gdbBreakpoint)
      : base (breakpointManager, pendingBreakpoint, codeContext)
    {
      m_debugger = debugger;

      GdbBreakpoint = gdbBreakpoint;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public MiBreakpoint GdbBreakpoint { get; protected set; }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    #region IDebugBoundBreakpoint2 Members

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public override int Delete ()
    {
      // 
      // Deletes the breakpoint.
      // 

      LoggingUtils.PrintFunction ();

      try
      {
        int handle = base.Delete ();

        if (handle == Constants.E_BP_DELETED)
        {
          return handle;
        }

        LoggingUtils.RequireOk (handle);

        m_debugger.RunInterruptOperation (delegate (CLangDebugger debugger)
        {
          string command = "-break-delete " + GdbBreakpoint.ID;

          debugger.GdbClient.SendCommand (command, delegate (MiResultRecord resultRecord)
          {
            MiResultRecord.RequireOk (resultRecord, command);
          });
        });

        return Constants.S_OK;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        return Constants.E_FAIL;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public override int Enable (int fEnable)
    {
      // 
      // Enables or disables the breakpoint.
      // 

      LoggingUtils.PrintFunction ();

      try
      {
        int handle = base.Enable (fEnable);

        if (handle == Constants.E_BP_DELETED)
        {
          return handle;
        }

        LoggingUtils.RequireOk (handle);

        m_debugger.RunInterruptOperation (delegate (CLangDebugger debugger)
        {
          string command = (m_breakpointEnabled ? "-break-enable " : "-break-disable ") + GdbBreakpoint.ID;

          debugger.GdbClient.SendCommand (command, delegate (MiResultRecord resultRecord)
          {
            MiResultRecord.RequireOk (resultRecord, command);
          });
        });

        return Constants.S_OK;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        return Constants.E_FAIL;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public override int SetCondition (BP_CONDITION bpCondition)
    {
      // 
      // Sets or changes the condition associated with this bound breakpoint.
      // 

      LoggingUtils.PrintFunction ();

      try
      {
        int handle = base.SetCondition (bpCondition);

        if (handle == Constants.E_BP_DELETED)
        {
          return handle;
        }

        LoggingUtils.RequireOk (handle);

        string condition = string.Empty;

        switch (bpCondition.styleCondition)
        {
          case enum_BP_COND_STYLE.BP_COND_WHEN_TRUE:
          {
            condition = bpCondition.bstrCondition;

            break;
          }

          case enum_BP_COND_STYLE.BP_COND_WHEN_CHANGED:
          {
            throw new NotImplementedException ();
          }
        }

        if (!string.IsNullOrEmpty (condition))
        {
          m_debugger.RunInterruptOperation (delegate (CLangDebugger debugger)
          {
            string command = string.Format ("-break-condition {0} \"{1}\"", GdbBreakpoint.ID, condition);

            debugger.GdbClient.SendCommand (command, delegate (MiResultRecord resultRecord)
            {
              MiResultRecord.RequireOk (resultRecord, command);
            });
          });
        }

        return Constants.S_OK;
      }
      catch (NotImplementedException e)
      {
        LoggingUtils.HandleException (e);

        return Constants.E_NOTIMPL;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        return Constants.E_FAIL;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public override int SetPassCount (BP_PASSCOUNT bpPassCount)
    {
      // 
      // Sets or change the pass count associated with this bound breakpoint.
      // 

      LoggingUtils.PrintFunction ();

      try
      {
        int handle = base.SetPassCount (bpPassCount);

        if (handle == Constants.E_BP_DELETED)
        {
          return handle;
        }

        LoggingUtils.RequireOk (handle);

        uint passCount = 0;

        switch (bpPassCount.stylePassCount)
        {
          case enum_BP_PASSCOUNT_STYLE.BP_PASSCOUNT_EQUAL:
          {
            goto case enum_BP_PASSCOUNT_STYLE.BP_PASSCOUNT_EQUAL_OR_GREATER;
          }

          case enum_BP_PASSCOUNT_STYLE.BP_PASSCOUNT_EQUAL_OR_GREATER:
          {
            passCount = bpPassCount.dwPassCount - 1;

            break;
          }

          case enum_BP_PASSCOUNT_STYLE.BP_PASSCOUNT_MOD:
          {
            throw new NotImplementedException ();
          }
        }

        m_debugger.RunInterruptOperation (delegate (CLangDebugger debugger)
        {
          string command = string.Format ("-break-after {0} {1}", GdbBreakpoint.ID, passCount);

          debugger.GdbClient.SendCommand (command, delegate (MiResultRecord resultRecord)
          {
            MiResultRecord.RequireOk (resultRecord, command);
          });
        });

        return Constants.S_OK;
      }
      catch (NotImplementedException e)
      {
        LoggingUtils.HandleException (e);

        return Constants.E_NOTIMPL;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        return Constants.E_FAIL;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    #endregion

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
