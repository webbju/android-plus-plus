////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using AndroidPlusPlus.Common;
using AndroidPlusPlus.VsDebugCommon;
using Microsoft.VisualStudio.Debugger.Interop;
using Microsoft.VisualStudio.Shell;
using System;
using System.Collections.Generic;
using System.Threading;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace AndroidPlusPlus.VsDebugEngine
{

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  public delegate int CLangDebuggerEventDelegate (CLangDebugger debugger);

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  public interface ICLangDebuggerEvent
  {
    int OnStartServer (CLangDebugger debugger);

    int OnTerminateServer (CLangDebugger debugger);

    int OnAttachClient (CLangDebugger debugger);

    int OnDetachClient (CLangDebugger debugger);

    int OnStopClient (CLangDebugger debugger);

    int OnContinueClient (CLangDebugger debugger);

    int OnTerminateClient (CLangDebugger debugger);
  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  public class CLangDebuggerCallback : ICLangDebuggerEvent, IDebugEventCallback2
  {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    private readonly CLangDebugger m_debugger;

    private readonly Dictionary<Guid, CLangDebuggerEventDelegate> m_debuggerCallback;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public CLangDebuggerCallback (CLangDebugger debugger)
    {
      // 
      // Register function handlers for specific events.
      // 

      m_debugger = debugger;

      m_debuggerCallback = new Dictionary<Guid, CLangDebuggerEventDelegate>
      {
        { ComUtils.GuidOf(typeof(CLangDebuggerEvent.StartServer)), OnStartServer },

        { ComUtils.GuidOf(typeof(CLangDebuggerEvent.TerminateServer)), OnTerminateServer },

        { ComUtils.GuidOf(typeof(CLangDebuggerEvent.AttachClient)), OnAttachClient },

        { ComUtils.GuidOf(typeof(CLangDebuggerEvent.DetachClient)), OnDetachClient },

        { ComUtils.GuidOf(typeof(CLangDebuggerEvent.StopClient)), OnStopClient },

        { ComUtils.GuidOf(typeof(CLangDebuggerEvent.ContinueClient)), OnContinueClient },

        { ComUtils.GuidOf(typeof(CLangDebuggerEvent.TerminateClient)), OnTerminateClient }
      };
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public bool HasEventCallback (Guid riidEvent)
    {
      return m_debuggerCallback.ContainsKey(riidEvent);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int Event (IDebugEngine2 pEngine, IDebugProcess2 pProcess, IDebugProgram2 pProgram, IDebugThread2 pThread, IDebugEvent2 pEvent, ref Guid riidEvent, uint dwAttrib)
    {
      // 
      // Custom event handler.
      // 

      try
      {
        LoggingUtils.Print ("[CLangDebuggerCallback] Event: " + riidEvent.ToString ());

        if (!m_debuggerCallback.TryGetValue(riidEvent, out CLangDebuggerEventDelegate eventCallback))
        {
          return Constants.E_NOTIMPL;
        }

        return eventCallback (m_debugger);
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        throw;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int OnStartServer (CLangDebugger debugger)
    {
      LoggingUtils.PrintFunction ();

      try
      {
        ThreadHelper.JoinableTaskFactory.Run(async () =>
        {
          await debugger.GdbServer.Start();
        });

        return Constants.S_OK;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        throw;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int OnTerminateServer (CLangDebugger debugger)
    {
      LoggingUtils.PrintFunction ();

      try
      {
        debugger.GdbServer.Kill ();

        return Constants.S_OK;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        throw;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int OnAttachClient (CLangDebugger debugger)
    {
      LoggingUtils.PrintFunction ();

      try
      {
        ThreadHelper.JoinableTaskFactory.Run(async () =>
        {
          await debugger.GdbClient.Attach(debugger.GdbServer);
        });

        return Constants.S_OK;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        throw;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int OnDetachClient (CLangDebugger debugger)
    {
      LoggingUtils.PrintFunction ();

      try
      {
        bool shouldContinue = false;

        ManualResetEvent detachLock = new ManualResetEvent (false);

        debugger.RunInterruptOperation (async (CLangDebugger debugger) =>
        {
          debugger.GdbClient.Detach ();

          detachLock.Set ();
        }, shouldContinue);

        bool detachedSignaled = detachLock.WaitOne (1000);

        if (!detachedSignaled)
        {
          throw new InvalidOperationException ("Failed to detach GDB client");
        }

        return Constants.S_OK;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        throw;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int OnStopClient (CLangDebugger debugger)
    {
      LoggingUtils.PrintFunction ();

      try
      {
        debugger.GdbClient.Stop ();

        return Constants.S_OK;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        throw;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int OnContinueClient (CLangDebugger debugger)
    {
      LoggingUtils.PrintFunction ();

      try
      {
        debugger.GdbClient.Continue ();

        return Constants.S_OK;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        throw;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int OnTerminateClient (CLangDebugger debugger)
    {
      LoggingUtils.PrintFunction ();

      try
      {
        debugger.GdbClient.Stop ();

        debugger.GdbClient.Terminate ();

        return Constants.S_OK;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        return Constants.E_FAIL;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
