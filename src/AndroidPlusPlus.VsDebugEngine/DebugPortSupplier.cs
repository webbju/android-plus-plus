////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Runtime.InteropServices;
using Microsoft.VisualStudio.Debugger.Interop;
using AndroidPlusPlus.Common;
using AndroidPlusPlus.VsDebugCommon;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace AndroidPlusPlus.VsDebugEngine
{

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  [ComVisible(true)]

  [Guid(DebugEngineGuids.guidDebugPortSupplierStringCLSID)]

  [ClassInterface (ClassInterfaceType.None)]

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  public class DebugPortSupplier : IDebugPortSupplier3, IDebugPortSupplierDescription2
  {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    private class DebugPortEnumerator : DebugEnumerator <IDebugPort2, IEnumDebugPorts2>, IEnumDebugPorts2
    {
      public DebugPortEnumerator (ICollection<IDebugPort2> ports)
        : base (ports)
      {
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected class DevicePortRequest : IDebugPortRequest2
    {
      protected readonly AndroidDevice m_device;

      public DevicePortRequest (AndroidDevice device)
      {
        m_device = device;
      }

      public int GetPortName (out string pbstrPortName)
      {
        pbstrPortName = m_device.ID;

        return Constants.S_OK;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    private readonly Dictionary<Guid, IDebugPort2> m_registeredPorts = new Dictionary<Guid, IDebugPort2> ();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public DebugPortSupplier ()
    {
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected int CreatePort (IDebugPortRequest2 portRequest, out IDebugPort2 port)
    {
      LoggingUtils.PrintFunction ();

      try
      {
        LoggingUtils.RequireOk(portRequest.GetPortName(out string requestPortName));

        if (string.IsNullOrWhiteSpace (requestPortName))
        {
          throw new InvalidOperationException ("Invalid/empty port name");
        }

        var device = AndroidAdb.GetConnectedDeviceById (requestPortName) ?? throw new InvalidOperationException ($"Failed to find a device named {requestPortName}");

        port = new DebuggeePort (this, device);

        return Constants.S_OK;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        port = null;

        return Constants.E_FAIL;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    #region IDebugPortSupplier2 Members

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int AddPort (IDebugPortRequest2 pRequest, out IDebugPort2 ppPort)
    {
      //
      // Attempt to find a port matching the requested name, otherwise one is created.
      //

      LoggingUtils.PrintFunction ();

      try
      {
        LoggingUtils.RequireOk(CanAddPort());

        LoggingUtils.RequireOk (pRequest.GetPortName (out string requestPortName));

        if (string.IsNullOrWhiteSpace (requestPortName))
        {
          throw new InvalidOperationException ("Invalid/empty port name");
        }

        ppPort = null;

        foreach (KeyValuePair<Guid, IDebugPort2> keyPair in m_registeredPorts)
        {
          IDebugPort2 registeredPort = keyPair.Value;

          LoggingUtils.RequireOk (registeredPort.GetPortName (out string portName));

          if (portName.Equals (requestPortName))
          {
            ppPort = registeredPort;

            break;
          }
        }

        if (ppPort == null)
        {
          //
          // Create and track a new port for this request.
          //

          LoggingUtils.RequireOk(CreatePort(pRequest, out ppPort));

          LoggingUtils.RequireOk (ppPort.GetPortId (out Guid portId));

          m_registeredPorts.Add (portId, ppPort);
        }

        return Constants.S_OK;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        ppPort = null;

        return Constants.E_FAIL;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int CanAddPort ()
    {
      //
      // Verifies that a port supplier can add new ports.
      //

      LoggingUtils.PrintFunction ();

      return Constants.S_OK;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int EnumPorts (out IEnumDebugPorts2 ppEnum)
    {
      //
      // Retrieves a list of all the ports supplied by a port supplier.
      //

      LoggingUtils.PrintFunction ();

      try
      {
        AndroidAdb.Refresh ();

        var connectedDevices = AndroidAdb.GetConnectedDevices ();

        foreach (var device in connectedDevices)
        {
          LoggingUtils.RequireOk (AddPort (new DevicePortRequest (device), out IDebugPort2 ppPort));
        }

        IDebugPort2 [] ports = new IDebugPort2 [m_registeredPorts.Count];

        m_registeredPorts.Values.CopyTo (ports, 0);

        ppEnum = new DebugPortEnumerator (ports);

        return Constants.S_OK;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        ppEnum = null;

        return Constants.E_FAIL;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int GetPort (ref Guid guidPort, out IDebugPort2 ppPort)
    {
      //
      // Gets a port from a port supplier.
      //

      LoggingUtils.PrintFunction ();

      ppPort = null;

      try
      {
        if (!m_registeredPorts.TryGetValue (guidPort, out ppPort))
        {
          return Constants.E_PORTSUPPLIER_NO_PORT;
        }

        return Constants.S_OK;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        return Constants.E_FAIL;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int GetPortSupplierId (out Guid pguidPortSupplier)
    {
      //
      // Gets the port supplier identifier.
      //

      LoggingUtils.PrintFunction ();

      pguidPortSupplier = this.GetType ().GUID;

      return Constants.S_OK;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int GetPortSupplierName (out string pbstrName)
    {
      //
      // Gets the port supplier name.
      //

      LoggingUtils.PrintFunction ();

      pbstrName = "Android++";

      return Constants.S_OK;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int RemovePort (IDebugPort2 pPort)
    {
      //
      // Removes a port. This method removes the port from the port supplier's internal list of active ports.
      //

      LoggingUtils.PrintFunction ();

      try
      {
        LoggingUtils.RequireOk (pPort.GetPortId (out Guid portId));

        m_registeredPorts.Remove (portId);

        return Constants.S_OK;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        return Constants.E_FAIL;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    #endregion

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    #region IDebugPortSupplier3 Members

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int CanPersistPorts ()
    {
      //
      // This method determines whether the port supplier can persist ports (by writing them to disk) between invocations of the debugger.
      //

      LoggingUtils.PrintFunction ();

      //
      // Return values from this function seem to do the opposite of what I'd expect:
      //
      // Constants.S_OK = Use EnumPorts to seed device data.
      // Constants.S_FALSE = UseEnumPersistedPorts to seed device data.
      //
      // I think it potentially refers to whether the DE manually persists the ports, and so doesn't rely on a 'PortNames' being provided by VS?
      //

      return Constants.S_OK;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int EnumPersistedPorts (BSTR_ARRAY PortNames, out IEnumDebugPorts2 ppEnum)
    {
      //
      // This method retrieves an object that allows enumeration of the list of persisted ports.
      //

      LoggingUtils.PrintFunction ();

      try
      {
#if false
        AndroidAdb.Refresh ();

        if (PortNames.dwCount > 0)
        {
          // TODO: This conversion process is tricky, and still broken.
          _BSTR_ARRAY portNames = (_BSTR_ARRAY) Marshal.PtrToStructure (PortNames.Members, typeof (_BSTR_ARRAY));

          for (int i = 0; i < PortNames.dwCount; ++i)
          {
            IDebugPort2 ppPort;

            AndroidDevice device = AndroidAdb.GetConnectedDeviceById (portNames.Members [i]);

            LoggingUtils.RequireOk (AddPort (new DevicePortRequest (device), out ppPort));
          }
        }
#endif

        LoggingUtils.RequireOk (EnumPorts (out ppEnum));

        return Constants.S_OK;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        ppEnum = null;

        return Constants.E_FAIL;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    #endregion

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    #region IDebugPortSupplierDescription2 Members

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int GetDescription (enum_PORT_SUPPLIER_DESCRIPTION_FLAGS [] pdwFlags, out string pbstrText)
    {
      //
      // Retrieves the description and description metadata for the port supplier.
      //

      LoggingUtils.PrintFunction ();

      pbstrText = "Select a target device/emulator from the 'Qualifier' drop-down option. If no targets are available, ensure your device is connected by using \"adb device\".";

      return Constants.S_OK;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    #endregion

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
