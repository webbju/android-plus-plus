////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using AndroidPlusPlus.Common;
using AndroidPlusPlus.VsDebugCommon;
using Microsoft.VisualStudio.Debugger.Interop;
using System;
using System.IO;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace AndroidPlusPlus.VsDebugEngine
{

  //
  // This class represents a document context to the debugger. A document context represents a location within a source file.
  //

  public class DebuggeeDocumentContext : IDebugDocumentContext2
  {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected readonly DebugEngine m_engine;

    protected readonly string m_fileName;

    protected readonly TEXT_POSITION m_beginPosition;

    protected readonly TEXT_POSITION m_endPosition;

    protected DebuggeeCodeContext m_codeContext;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public DebuggeeDocumentContext (DebugEngine engine, string fileName, TEXT_POSITION beginPosition, TEXT_POSITION endPosition)
    {
      m_engine = engine;

      m_fileName = PathUtils.ConvertPathCygwinToWindows (fileName);

      m_beginPosition = beginPosition;

      m_endPosition = endPosition;

      m_codeContext = null;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int SetCodeContext (DebuggeeCodeContext codeContext)
    {
      LoggingUtils.PrintFunction ();

      m_codeContext = codeContext;

      return Constants.S_OK;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    #region IDebugDocumentContext2 Members

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int Compare (enum_DOCCONTEXT_COMPARE compare, IDebugDocumentContext2 [] documentContexts, uint documentContextsLength, out uint matchIndex)
    {
      //
      // Compares this document context to a given array of document contexts.
      // Returns via 'matchIndex' the index into the 'documentContexts' array of the first document context that satisfies the comparison.
      //

      LoggingUtils.PrintFunction ();

      try
      {
        matchIndex = 0;

        throw new NotImplementedException ();

        //return Constants.S_OK;
      }
      catch (NotImplementedException e)
      {
        LoggingUtils.HandleException (e);

        matchIndex = 0;

        return Constants.E_NOTIMPL;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        matchIndex = 0;

        return Constants.E_FAIL;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int EnumCodeContexts (out IEnumDebugCodeContexts2 enumCodeContexts)
    {
      //
      // Retrieves a list of all code contexts associated with this document context.
      //

      LoggingUtils.PrintFunction ();

      try
      {
        IDebugCodeContext2 [] codeContexts;

        if (m_codeContext != null)
        {
          codeContexts = new IDebugCodeContext2 [] { m_codeContext };
        }
        else
        {
          codeContexts = Array.Empty<IDebugCodeContext2>();
        }

        enumCodeContexts = new DebuggeeCodeContext.Enumerator (codeContexts);

        return Constants.S_OK;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        enumCodeContexts = null;

        return Constants.E_FAIL;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int GetDocument (out IDebugDocument2 document)
    {
      //
      // Gets the document that contains this document context.
      // This method is for those debug engines that supply documents directly to the IDE. Otherwise, this method should return E_NOTIMPL.
      //

      LoggingUtils.PrintFunction ();

      document = null;

      return Constants.E_NOTIMPL;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int GetLanguageInfo (ref string languageName, ref Guid languageGuid)
    {
      //
      // Gets the language associated with this document context.
      //

      LoggingUtils.PrintFunction ();

      languageGuid = DebugEngineGuids.guidLanguageCpp;

      languageName = DebugEngineGuids.GetLanguageName (languageGuid);

      return Constants.S_OK;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int GetName (enum_GETNAME_TYPE type, out string name)
    {
      //
      // Gets the displayable name of the document that contains this document context.
      //

      LoggingUtils.PrintFunction ();

      name = string.Empty;

      try
      {
        switch (type)
        {
          case enum_GETNAME_TYPE.GN_NAME:
          {
            //
            // Specifies a friendly name of the document or context.
            //

            name = Path.GetFileNameWithoutExtension (m_fileName);

            break;
          }

          case enum_GETNAME_TYPE.GN_FILENAME:
          {
            //
            // Specifies the full path of the document or context.
            //

            name = m_fileName;

            break;
          }

          case enum_GETNAME_TYPE.GN_BASENAME:
          {
            //
            // Specifies a base file name instead of a full path of the document or context.
            //

            name = Path.GetFileName (m_fileName);

            break;
          }

          case enum_GETNAME_TYPE.GN_MONIKERNAME:
          {
            //
            // Specifies a unique name of the document or context in the form of a moniker.
            //

            name = m_fileName;

            break;
          }

          case enum_GETNAME_TYPE.GN_URL:
          {
            //
            // Specifies a URL name of the document or context.
            //

            name = "file://" + m_fileName.Replace ("\\", "/");

            break;
          }

          case enum_GETNAME_TYPE.GN_TITLE:
          {
            //
            // Specifies a title of the document, if one exists.
            //

            name = Path.GetFileName (m_fileName);

            break;
          }

          case enum_GETNAME_TYPE.GN_STARTPAGEURL:
          {
            //
            // Gets the starting page URL for processes.
            //

            name = "file://" + m_fileName.Replace ("\\", "/");

            break;
          }
        }

        if (string.IsNullOrEmpty (name))
        {
          throw new InvalidOperationException ();
        }

        return Constants.S_OK;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        return Constants.E_FAIL;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int GetSourceRange (TEXT_POSITION [] beginPosition, TEXT_POSITION [] endPosition)
    {
      //
      // Gets the source code range of this document context.
      // A source range is the entire range of source code, from the current statement back to just after the previous statement that contributed code.
      // The source range is typically used for mixing source statements, including comments, with code in the disassembly window.
      //

      LoggingUtils.PrintFunction ();

      try
      {
        throw new NotImplementedException ();
      }
      catch (NotImplementedException e)
      {
        LoggingUtils.HandleException (e);

        return Constants.E_NOTIMPL;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int GetStatementRange (TEXT_POSITION [] beginPosition, TEXT_POSITION [] endPosition)
    {
      //
      // Gets the file statement range of the document context.
      // A statement range is the range of the lines that contributed the code to which this document context refers.
      //

      LoggingUtils.PrintFunction ();

      try
      {
        beginPosition [0].dwLine = m_beginPosition.dwLine;

        beginPosition [0].dwColumn = m_beginPosition.dwColumn;

        endPosition [0].dwLine = m_endPosition.dwLine;

        endPosition [0].dwColumn = m_endPosition.dwColumn;

        return Constants.S_OK;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        return Constants.E_FAIL;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int Seek (int nCount, out IDebugDocumentContext2 ppDocContext)
    {
      //
      // Moves the document context by a given number of statements or lines.
      //

      LoggingUtils.PrintFunction ();

      ppDocContext = null;

      return Constants.E_NOTIMPL;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    #endregion

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }

}
