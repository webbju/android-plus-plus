////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Runtime.InteropServices;
using Microsoft.VisualStudio.Debugger.Interop;
using AndroidPlusPlus.Common;
using AndroidPlusPlus.VsDebugCommon;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace AndroidPlusPlus.VsDebugEngine
{

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  //
  // A debug engine (DE) or a custom port supplier implements this interface to represent a 'program' that can be debugged.
  // A 'program' is a thread container running in a particular run-time architecture, while a process is made up of one or more programs.
  //

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  public class DebuggeeProgram : IDebugProgram3, IDebugProgramNode2
  {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public class Enumerator : DebugEnumerator<IDebugProgram2, IEnumDebugPrograms2>, IEnumDebugPrograms2
    {
      public Enumerator (ICollection<IDebugProgram2> programs)
        : base (programs)
      {
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public class EnumeratorCodePaths : DebugEnumerator<CODE_PATH, IEnumCodePaths2>, IEnumCodePaths2
    {
      public EnumeratorCodePaths (ICollection<CODE_PATH> codePaths)
        : base (codePaths)
      {
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public DebuggeeProgram (DebuggeeProcess process)
    {
      Guid = Guid.NewGuid ();

      DebugProcess = process;

      AttachedEngine = null;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public Guid Guid { get; protected set; }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public DebuggeeProcess DebugProcess { get; protected set; }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public DebugEngine AttachedEngine { get; set; }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    #region IDebugProgram3 Members

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int Attach (IDebugEventCallback2 pCallback)
    {
      //
      // Attaches to this program.
      //

      LoggingUtils.PrintFunction ();

      Exception rethrowable = null;

      try
      {
        LoggingUtils.RequireOk (AttachedEngine.NativeDebugger.NativeProgram.Attach (pCallback));

        LoggingUtils.RequireOk (AttachedEngine.JavaDebugger.JavaProgram.Attach (pCallback));

        return Constants.S_OK;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        rethrowable = e;

        return Constants.E_FAIL;
      }
      finally
      {
        if (rethrowable != null)
        {
          throw rethrowable;
        }
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int CanDetach ()
    {
      //
      // Determines if a debug engine (DE) can detach from the program.
      //

      LoggingUtils.PrintFunction ();

      Exception rethrowable = null;

      try
      {
        LoggingUtils.RequireOk (AttachedEngine.NativeDebugger.NativeProgram.CanDetach ());

        LoggingUtils.RequireOk (AttachedEngine.JavaDebugger.JavaProgram.CanDetach ());

        return Constants.S_OK;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        rethrowable = e;

        return Constants.E_FAIL;
      }
      finally
      {
        if (rethrowable != null)
        {
          throw rethrowable;
        }
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int CauseBreak ()
    {
      //
      // Requests that this program stop execution the next time one of its threads runs code.
      //

      LoggingUtils.PrintFunction ();

      Exception rethrowable = null;

      try
      {
        LoggingUtils.RequireOk (AttachedEngine.NativeDebugger.NativeProgram.CauseBreak ());

        LoggingUtils.RequireOk (AttachedEngine.JavaDebugger.JavaProgram.CauseBreak ());

        return Constants.S_OK;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        rethrowable = e;

        return Constants.E_FAIL;
      }
      finally
      {
        if (rethrowable != null)
        {
          throw rethrowable;
        }
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int Continue (IDebugThread2 pThread)
    {
      //
      // Continues running this program from a stopped state. Any previous execution state is preserved.
      //

      LoggingUtils.PrintFunction ();

      Exception rethrowable = null;

      try
      {
        LoggingUtils.RequireOk (AttachedEngine.NativeDebugger.NativeProgram.Continue (pThread));

        LoggingUtils.RequireOk (AttachedEngine.JavaDebugger.JavaProgram.Continue (pThread));

        return Constants.S_OK;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        rethrowable = e;

        return Constants.E_FAIL;
      }
      finally
      {
        if (rethrowable != null)
        {
          throw rethrowable;
        }
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int Detach ()
    {
      //
      // Detaches the debugger from this program.
      //

      LoggingUtils.PrintFunction ();

      Exception rethrowable = null;

      try
      {
        LoggingUtils.RequireOk (AttachedEngine.Detach (this));

        return Constants.S_OK;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        rethrowable = e;

        return Constants.E_FAIL;
      }
      finally
      {
        if (rethrowable != null)
        {
          throw rethrowable;
        }
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int EnumCodeContexts (IDebugDocumentPosition2 pDocPos, out IEnumDebugCodeContexts2 ppEnum)
    {
      //
      // Enumerates the code contexts for a given position in a source file.
      //

      LoggingUtils.PrintFunction ();

      ppEnum = null;

      try
      {
        List<IDebugCodeContext2> codeContexts = new List<IDebugCodeContext2> ();

        uint count;

        {
          LoggingUtils.RequireOk (AttachedEngine.NativeDebugger.NativeProgram.EnumCodeContexts (pDocPos, out ppEnum));

          LoggingUtils.RequireOk (ppEnum.GetCount (out count));

          IDebugCodeContext2 [] codeContextArray = new IDebugCodeContext2 [count];

          LoggingUtils.RequireOk (ppEnum.Next (count, codeContextArray, ref count));

          codeContexts.AddRange (codeContextArray);
        }

#if false
        {
          LoggingUtils.RequireOk (AttachedEngine.JavaDebugger.JavaProgram.EnumCodeContexts (pDocPos, out ppEnum));

          LoggingUtils.RequireOk (ppEnum.GetCount (out count));

          IDebugCodeContext2 [] codeContextArray = new IDebugCodeContext2 [count];

          LoggingUtils.RequireOk (ppEnum.Next (count, codeContextArray, ref count));

          codeContexts.AddRange (codeContextArray);
        }
#endif

        ppEnum = new DebuggeeCodeContext.Enumerator (codeContexts);

        return Constants.S_OK;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        return Constants.E_FAIL;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int EnumCodePaths (string pszHint, IDebugCodeContext2 pStart, IDebugStackFrame2 pFrame, int fSource, out IEnumCodePaths2 ppEnum, out IDebugCodeContext2 ppSafety)
    {
      //
      // Enumerates the code paths of this program.
      //

      LoggingUtils.PrintFunction ();

      ppEnum = null;

      ppSafety = null;

      try
      {
        LoggingUtils.RequireOk (AttachedEngine.NativeDebugger.NativeProgram.EnumCodePaths (pszHint, pStart, pFrame, fSource, out ppEnum, out ppSafety));

        //LoggingUtils.RequireOk (AttachedEngine.JavaDebugger.JavaProgram.EnumCodePaths (pszHint, pStart, pFrame, fSource, out ppEnum, out ppSafety));

        return Constants.S_OK;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        return Constants.E_FAIL;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int EnumModules (out IEnumDebugModules2 ppEnum)
    {
      //
      // Enumerates the modules that this program has loaded and is executing.
      //

      LoggingUtils.PrintFunction ();

      ppEnum = null;

      try
      {
        List<IDebugModule2> modules = new List<IDebugModule2> ();

        uint count;

        {
          LoggingUtils.RequireOk (AttachedEngine.NativeDebugger.NativeProgram.EnumModules (out ppEnum));

          LoggingUtils.RequireOk (ppEnum.GetCount (out count));

          IDebugModule2 [] moduleArray = new IDebugModule2 [count];

          LoggingUtils.RequireOk (ppEnum.Next (count, moduleArray, ref count));

          modules.AddRange (moduleArray);
        }

        {
          LoggingUtils.RequireOk (AttachedEngine.JavaDebugger.JavaProgram.EnumModules (out ppEnum));

          LoggingUtils.RequireOk (ppEnum.GetCount (out count));

          IDebugModule2 [] moduleArray = new IDebugModule2 [count];

          LoggingUtils.RequireOk (ppEnum.Next (count, moduleArray, ref count));

          modules.AddRange (moduleArray);
        }

        ppEnum = new DebuggeeModule.Enumerator (modules);

        return Constants.S_OK;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        return Constants.E_FAIL;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int EnumThreads (out IEnumDebugThreads2 ppEnum)
    {
      //
      // Enumerates the threads that are running in this program.
      //

      LoggingUtils.PrintFunction ();

      try
      {
        List<IDebugThread2> threads = new List<IDebugThread2> ();

        uint count;

        {
          LoggingUtils.RequireOk (AttachedEngine.NativeDebugger.NativeProgram.EnumThreads (out ppEnum));

          LoggingUtils.RequireOk (ppEnum.GetCount (out count));

          IDebugThread2 [] threadArray = new IDebugThread2 [count];

          LoggingUtils.RequireOk (ppEnum.Next (count, threadArray, ref count));

          threads.AddRange (threadArray);
        }

        {
          LoggingUtils.RequireOk (AttachedEngine.JavaDebugger.JavaProgram.EnumThreads (out ppEnum));

          LoggingUtils.RequireOk (ppEnum.GetCount (out count));

          IDebugThread2 [] threadArray = new IDebugThread2 [count];

          LoggingUtils.RequireOk (ppEnum.Next (count, threadArray, ref count));
        }

        ppEnum = new DebuggeeThread.Enumerator (threads);

        return Constants.S_OK;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        ppEnum = null;

        return Constants.E_FAIL;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int Execute ()
    {
      //
      // Continues running this program from a stopped state. Any previous execution state is cleared.
      //

      LoggingUtils.PrintFunction ();

      try
      {
        LoggingUtils.RequireOk (AttachedEngine.NativeDebugger.NativeProgram.Execute ());

        LoggingUtils.RequireOk (AttachedEngine.JavaDebugger.JavaProgram.Execute ());

        return Constants.S_OK;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        return Constants.E_FAIL;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int GetDebugProperty (out IDebugProperty2 ppProperty)
    {
      //
      // Gets program properties.
      //

      LoggingUtils.PrintFunction ();

      ppProperty = null;

      try
      {
        LoggingUtils.RequireOk (AttachedEngine.NativeDebugger.NativeProgram.GetDebugProperty (out ppProperty));

        //LoggingUtils.RequireOk (AttachedEngine.JavaDebugger.JavaProgram.GetDebugProperty (out ppProperty));

        return Constants.S_OK;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        return Constants.E_FAIL;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int GetDisassemblyStream (enum_DISASSEMBLY_STREAM_SCOPE dwScope, IDebugCodeContext2 pCodeContext, out IDebugDisassemblyStream2 ppDisassemblyStream)
    {
      //
      // Gets the disassembly stream for this program or part of this program.
      //

      LoggingUtils.PrintFunction ();

      ppDisassemblyStream = null;

      try
      {
        LoggingUtils.RequireOk (AttachedEngine.NativeDebugger.NativeProgram.GetDisassemblyStream (dwScope, pCodeContext, out ppDisassemblyStream));

        //LoggingUtils.RequireOk (AttachedEngine.JavaDebugger.JavaProgram.GetDisassemblyStream (dwScope, pCodeContext, out ppDisassemblyStream));

        return Constants.S_OK;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        return Constants.E_FAIL;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int GetENCUpdate (out object ppUpdate)
    {
      //
      // Gets the Edit and Continue (ENC) update for this program.
      // A custom debug engine does not implement this method (it should always return E_NOTIMPL).
      //

      LoggingUtils.PrintFunction ();

      ppUpdate = null;

      return Constants.E_NOTIMPL;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int GetEngineInfo (out string pbstrEngine, out Guid pguidEngine)
    {
      //
      // Gets the name and identifier of the debug engine (DE) running a program.
      //

      LoggingUtils.PrintFunction ();

      pguidEngine = DebugEngineGuids.guidDebugEngineID;

      pbstrEngine = DebugEngineGuids.GetEngineNameFromId (pguidEngine);

      return Constants.S_OK;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int GetMemoryBytes (out IDebugMemoryBytes2 ppMemoryBytes)
    {
      //
      // Gets the memory bytes for this program.
      //

      LoggingUtils.PrintFunction ();

      ppMemoryBytes = null;

      try
      {
        return AttachedEngine.NativeDebugger.NativeProgram.GetMemoryBytes (out ppMemoryBytes);
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        return Constants.E_FAIL;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int GetName (out string pbstrName)
    {
      //
      // Gets the name of the program.
      //

      LoggingUtils.PrintFunction ();

      try
      {
        pbstrName = DebugProcess.NativeProcess.Name;

        //LoggingUtils.RequireOk (AttachedEngine.NativeDebugger.NativeProgram.GetName (out pbstrName));

        //LoggingUtils.RequireOk (AttachedEngine.JavaDebugger.JavaProgram.GetName (out pbstrName));

        return Constants.S_OK;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        pbstrName = "[unknown program]";

        return Constants.E_FAIL;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int GetProcess (out IDebugProcess2 ppProcess)
    {
      //
      // Gets the process that this program is running in.
      //

      LoggingUtils.PrintFunction ();

      ppProcess = DebugProcess;

      return Constants.S_OK;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int GetProgramId (out Guid pguidProgramId)
    {
      //
      // Gets a globally unique identifier for this program.
      //

      LoggingUtils.PrintFunction ();

      pguidProgramId = Guid;

      return Constants.S_OK;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int Step (IDebugThread2 pThread, enum_STEPKIND sk, enum_STEPUNIT Step)
    {
      //
      // Performs a step.
      //

      LoggingUtils.PrintFunction ();

      try
      {
        LoggingUtils.RequireOk (AttachedEngine.NativeDebugger.NativeProgram.Step (pThread, sk, Step));

        //LoggingUtils.RequireOk (AttachedEngine.JavaDebugger.JavaProgram.Step (pThread, sk, Step));

        return Constants.S_OK;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        return Constants.E_FAIL;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int Terminate ()
    {
      //
      // Terminates this program.
      //

      LoggingUtils.PrintFunction ();

      try
      {
        if (AttachedEngine.NativeDebugger.NativeProgram != null)
        {
          LoggingUtils.RequireOk (AttachedEngine.NativeDebugger.NativeProgram.Terminate ());
        }

        if (AttachedEngine.JavaDebugger.JavaProgram != null)
        {
          LoggingUtils.RequireOk (AttachedEngine.JavaDebugger.JavaProgram.Terminate ());
        }

        return Constants.S_OK;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        return Constants.E_FAIL;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int WriteDump (enum_DUMPTYPE DUMPTYPE, string pszDumpUrl)
    {
      //
      // Writes a dump to a file.
      //

      LoggingUtils.PrintFunction ();

      try
      {
        LoggingUtils.RequireOk (AttachedEngine.NativeDebugger.NativeProgram.WriteDump (DUMPTYPE, pszDumpUrl));

        LoggingUtils.RequireOk (AttachedEngine.JavaDebugger.JavaProgram.WriteDump (DUMPTYPE, pszDumpUrl));

        return Constants.S_OK;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        return Constants.E_FAIL;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    #endregion

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    #region IDebugProgram3 Members

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int ExecuteOnThread (IDebugThread2 pThread)
    {
      //
      // ExecuteOnThread is called when the Session Debug Manager (SDM) wants execution to continue and have stepping state cleared.
      //

      LoggingUtils.PrintFunction ();

      try
      {
        LoggingUtils.RequireOk (AttachedEngine.NativeDebugger.NativeProgram.ExecuteOnThread (pThread));

        //LoggingUtils.RequireOk (AttachedEngine.JavaDebugger.JavaProgram.ExecuteOnThread (pThread));

        return Constants.S_OK;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        return Constants.E_FAIL;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    #endregion

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    #region IDebugProgramNode2 Members

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    [Obsolete ("These methods are not called by the Visual Studio debugger.")]
    public int Attach_V7 (IDebugProgram2 pMDMProgram, IDebugEventCallback2 pCallback, uint dwReason)
    {
      LoggingUtils.PrintFunction ();

      return Constants.E_NOTIMPL;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    [Obsolete ("These methods are not called by the Visual Studio debugger.")]
    public int DetachDebugger_V7 ()
    {
      LoggingUtils.PrintFunction ();

      return Constants.E_NOTIMPL;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    [Obsolete ("These methods are not called by the Visual Studio debugger.")]
    public int GetHostMachineName_V7 (out string pbstrHostMachineName)
    {
      LoggingUtils.PrintFunction ();

      pbstrHostMachineName = string.Empty;

      return Constants.E_NOTIMPL;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int GetHostName (enum_GETHOSTNAME_TYPE dwHostNameType, out string pbstrHostName)
    {
      //
      // Gets the name of the process hosting the program.
      //

      LoggingUtils.PrintFunction ();

      try
      {
        if (dwHostNameType == enum_GETHOSTNAME_TYPE.GHN_FRIENDLY_NAME)
        {
          LoggingUtils.RequireOk (DebugProcess.GetName (enum_GETNAME_TYPE.GN_MONIKERNAME, out pbstrHostName));
        }
        else if (dwHostNameType == enum_GETHOSTNAME_TYPE.GHN_FILE_NAME)
        {
          LoggingUtils.RequireOk (DebugProcess.GetName (enum_GETNAME_TYPE.GN_FILENAME, out pbstrHostName));
        }
        else
        {
          throw new NotImplementedException ();
        }

        return Constants.S_OK;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        pbstrHostName = string.Empty;

        return Constants.E_FAIL;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int GetHostPid (AD_PROCESS_ID [] pHostProcessId)
    {
      //
      // Gets the system process identifier for the process hosting the program.
      //

      LoggingUtils.PrintFunction ();

      try
      {
        LoggingUtils.RequireOk (DebugProcess.GetPhysicalProcessId (pHostProcessId));

        return Constants.S_OK;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        return Constants.E_FAIL;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int GetProgramName (out string pbstrProgramName)
    {
      //
      // Gets the name of the program.
      //

      LoggingUtils.PrintFunction ();

      try
      {
        LoggingUtils.RequireOk (DebugProcess.GetName (enum_GETNAME_TYPE.GN_NAME, out pbstrProgramName));

        return Constants.S_OK;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        pbstrProgramName = string.Empty;

        return Constants.E_FAIL;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    #endregion

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
