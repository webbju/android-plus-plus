////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Runtime.InteropServices;

using AndroidPlusPlus.Common;
using AndroidPlusPlus.VsDebugCommon;

using Microsoft.VisualStudio.Debugger.Interop;
using Constants = AndroidPlusPlus.VsDebugCommon.Constants;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace AndroidPlusPlus.VsDebugEngine
{

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  #region DebugEvent Implementations

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  [ComVisible (true)]
  [ClassInterface (ClassInterfaceType.None)]
  public class SynchronousDebugEvent : IDebugEvent2
  {
    public int GetAttributes (out uint pdwAttrib)
    {
      pdwAttrib = (uint)enum_EVENTATTRIBUTES.EVENT_SYNCHRONOUS;

      return Constants.S_OK;
    }
  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  [ComVisible (true)]
  [ClassInterface (ClassInterfaceType.None)]
  public class AsynchronousDebugEvent : IDebugEvent2
  {
    public int GetAttributes (out uint pdwAttrib)
    {
      pdwAttrib = (uint)enum_EVENTATTRIBUTES.EVENT_ASYNCHRONOUS;

      return Constants.S_OK;
    }
  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  [ComVisible (true)]
  [ClassInterface (ClassInterfaceType.None)]
  public class SynchronousStopDebugEvent : IDebugEvent2
  {
    public int GetAttributes (out uint pdwAttrib)
    {
      pdwAttrib = (uint)enum_EVENTATTRIBUTES.EVENT_STOPPING | (uint)enum_EVENTATTRIBUTES.EVENT_SYNCHRONOUS;

      return Constants.S_OK;
    }
  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  [ComVisible (true)]
  [ClassInterface (ClassInterfaceType.None)]
  public class AsynchronousStopDebugEvent : IDebugEvent2
  {
    public int GetAttributes (out uint pdwAttrib)
    {
      pdwAttrib = (uint)enum_EVENTATTRIBUTES.EVENT_STOPPING | (uint)enum_EVENTATTRIBUTES.EVENT_ASYNCHRONOUS;

      return Constants.S_OK;
    }
  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  [ComVisible (true)]
  [ClassInterface (ClassInterfaceType.None)]
  public class ImmediateDebugEvent : IDebugEvent2
  {
    public int GetAttributes (out uint pdwAttrib)
    {
      pdwAttrib = (uint) enum_EVENTATTRIBUTES.EVENT_IMMEDIATE;

      return Constants.S_OK;
    }
  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  [ComVisible (true)]
  [ClassInterface (ClassInterfaceType.None)]
  public class ExpressionEvaluationDebugEvent : IDebugEvent2
  {
    public int GetAttributes (out uint pdwAttrib)
    {
      pdwAttrib = (uint)enum_EVENTATTRIBUTES.EVENT_EXPRESSION_EVALUATION;

      return Constants.S_OK;
    }
  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  #endregion

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  public static class DebugEngineEvent
  {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    [ComVisible (true)]
    [ClassInterface (ClassInterfaceType.None)]
    [InheritGuid (typeof (IDebugSessionCreateEvent2))]
    public sealed class SessionCreate : SynchronousDebugEvent, IDebugEvent2, IDebugSessionCreateEvent2
    {
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    [ComVisible (true)]
    [ClassInterface (ClassInterfaceType.None)]
    [InheritGuid (typeof (IDebugSessionDestroyEvent2))]
    public sealed class SessionDestroy : SynchronousDebugEvent, IDebugEvent2, IDebugSessionDestroyEvent2
    {
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    [ComVisible (true)]
    [ClassInterface (ClassInterfaceType.None)]
    [InheritGuid (typeof (IDebugEngineCreateEvent2))]
    public sealed class EngineCreate : SynchronousDebugEvent, IDebugEvent2, IDebugEngineCreateEvent2
    {
      private readonly IDebugEngine2 m_engine;

      public EngineCreate (IDebugEngine2 engine)
      {
        m_engine = engine;
      }

      int IDebugEngineCreateEvent2.GetEngine (out IDebugEngine2 engine)
      {
        engine = m_engine;

        return Constants.S_OK;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    [ComVisible (true)]
    [ClassInterface (ClassInterfaceType.None)]
    [InheritGuid (typeof (IDebugProcessCreateEvent2))]
    public sealed class ProcessCreate : SynchronousDebugEvent, IDebugEvent2, IDebugProcessCreateEvent2
    {
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    [ComVisible (true)]
    [ClassInterface (ClassInterfaceType.None)]
    [InheritGuid (typeof (IDebugProcessDestroyEvent2))]
    public sealed class ProcessDestroy : SynchronousDebugEvent, IDebugEvent2, IDebugProcessDestroyEvent2
    {
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    [ComVisible (true)]
    [ClassInterface (ClassInterfaceType.None)]
    [InheritGuid (typeof (IDebugProgramCreateEvent2))]
    public sealed class ProgramCreate : SynchronousDebugEvent, IDebugEvent2, IDebugProgramCreateEvent2
    {
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    [ComVisible (true)]
    [ClassInterface (ClassInterfaceType.None)]
    [InheritGuid (typeof (IDebugProgramDestroyEvent2))]
    public sealed class ProgramDestroy : SynchronousDebugEvent, IDebugEvent2, IDebugProgramDestroyEvent2
    {
      private readonly uint m_exitCode;

      public ProgramDestroy (uint exitCode)
      {
        m_exitCode = exitCode;
      }

      int IDebugProgramDestroyEvent2.GetExitCode (out uint pdwExit)
      {
        pdwExit = m_exitCode;

        return Constants.S_OK;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    [ComVisible (true)]
    [ClassInterface (ClassInterfaceType.None)]
    [InheritGuid (typeof (IDebugThreadCreateEvent2))]
    public sealed class ThreadCreate : AsynchronousDebugEvent, IDebugEvent2, IDebugThreadCreateEvent2
    {
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    [ComVisible (true)]
    [ClassInterface (ClassInterfaceType.None)]
    [InheritGuid (typeof (IDebugThreadDestroyEvent2))]
    public sealed class ThreadDestroy : AsynchronousDebugEvent, IDebugEvent2, IDebugThreadDestroyEvent2
    {
      private readonly uint m_exitCode;

      public ThreadDestroy (uint exitCode)
      {
        m_exitCode = exitCode;
      }

      int IDebugThreadDestroyEvent2.GetExitCode (out uint exitCode)
      {
        exitCode = m_exitCode;

        return Constants.S_OK;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    [ComVisible (true)]
    [ClassInterface (ClassInterfaceType.None)]
    [InheritGuid (typeof (IDebugLoadCompleteEvent2))]
    public sealed class LoadComplete : AsynchronousStopDebugEvent, IDebugEvent2, IDebugLoadCompleteEvent2
    {
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    [ComVisible (true)]
    [ClassInterface (ClassInterfaceType.None)]
    [InheritGuid (typeof (IDebugEntryPointEvent2))]
    public sealed class EntryPoint : AsynchronousStopDebugEvent, IDebugEvent2, IDebugEntryPointEvent2
    {
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    [ComVisible (true)]
    [ClassInterface (ClassInterfaceType.None)]
    [InheritGuid (typeof (IDebugStepCompleteEvent2))]
    public sealed class StepComplete : AsynchronousStopDebugEvent, IDebugEvent2, IDebugStepCompleteEvent2
    {
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    [ComVisible (true)]
    [ClassInterface (ClassInterfaceType.None)]
    [InheritGuid (typeof (IDebugCanStopEvent2))]
    public sealed class CanStop : SynchronousStopDebugEvent, IDebugEvent2, IDebugCanStopEvent2
    {
      private readonly IDebugCodeContext2 m_codeContext;

      private readonly IDebugDocumentContext2 m_documentContext;

      private readonly enum_CANSTOP_REASON m_canStopReason;

      private bool m_canStop;

      public CanStop (IDebugCodeContext2 codeContext, IDebugDocumentContext2 documentContext, enum_CANSTOP_REASON reason)
      {
        m_codeContext = codeContext;

        m_documentContext = documentContext;

        m_canStop = false;

        m_canStopReason = reason;
      }

      int IDebugCanStopEvent2.CanStop (int fCanStop)
      {
        m_canStop = (fCanStop != 0);

        return Constants.S_OK;
      }

      int IDebugCanStopEvent2.GetCodeContext (out IDebugCodeContext2 ppCodeContext)
      {
        ppCodeContext = m_codeContext;

        return Constants.S_OK;
      }

      int IDebugCanStopEvent2.GetDocumentContext (out IDebugDocumentContext2 ppDocCxt)
      {
        ppDocCxt = m_documentContext;

        return Constants.S_OK;
      }

      int IDebugCanStopEvent2.GetReason (enum_CANSTOP_REASON [] pcr)
      {
        pcr [0] = m_canStopReason;

        return Constants.S_OK;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    [ComVisible (true)]
    [ClassInterface (ClassInterfaceType.None)]
    [InheritGuid (typeof (IDebugBreakEvent2))]
    public sealed class Break : AsynchronousStopDebugEvent, IDebugEvent2, IDebugBreakEvent2
    {
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    [ComVisible (true)]
    [ClassInterface (ClassInterfaceType.None)]
    [InheritGuid (typeof (IDebugBreakpointEvent2))]
    public sealed class BreakpointHit : AsynchronousStopDebugEvent, IDebugEvent2, IDebugBreakpointEvent2
    {
      private readonly IEnumDebugBoundBreakpoints2 m_boundBreakpoints;

      public BreakpointHit (IEnumDebugBoundBreakpoints2 boundBreakpoints)
      {
        m_boundBreakpoints = boundBreakpoints;
      }

      int IDebugBreakpointEvent2.EnumBreakpoints(out IEnumDebugBoundBreakpoints2 ppEnum)
      {
        LoggingUtils.PrintFunction ();

        ppEnum = m_boundBreakpoints;

        return Constants.S_OK;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    [ComVisible (true)]
    [ClassInterface (ClassInterfaceType.None)]
    [InheritGuid (typeof (IDebugExceptionEvent2))]
    public sealed class Exception : AsynchronousStopDebugEvent, IDebugEvent2, IDebugExceptionEvent2
    {
      private readonly DebuggeeProgram m_debugProgram;

      private readonly string m_exceptionName;

      private readonly string m_exceptionDescription;

      private readonly uint m_exceptionCode;

      private readonly bool m_canContinue;

      public Exception (DebuggeeProgram program, string name, string description, uint code, bool canContinue)
      {
        m_debugProgram = program;

        m_exceptionName = name;

        m_exceptionDescription = description;

        m_exceptionCode = code;

        m_canContinue = canContinue;
      }

      int IDebugExceptionEvent2.CanPassToDebuggee ()
      {
        return Constants.S_FALSE;
      }

      int IDebugExceptionEvent2.GetException (EXCEPTION_INFO [] pExceptionInfo)
      {
        LoggingUtils.PrintFunction ();

        try
        {
          pExceptionInfo [0] = new EXCEPTION_INFO ();

          pExceptionInfo [0].bstrExceptionName = m_exceptionName;

          pExceptionInfo [0].pProgram = m_debugProgram as IDebugProgram2;

          LoggingUtils.RequireOk (m_debugProgram.DebugProcess.GetName (enum_GETNAME_TYPE.GN_NAME, out pExceptionInfo [0].bstrProgramName));

          pExceptionInfo [0].dwCode = m_exceptionCode;

          pExceptionInfo [0].dwState = enum_EXCEPTION_STATE.EXCEPTION_NONE;

          pExceptionInfo [0].dwState |= enum_EXCEPTION_STATE.EXCEPTION_STOP_FIRST_CHANCE;

          if (!m_canContinue)
          {
            pExceptionInfo [0].dwState |= enum_EXCEPTION_STATE.EXCEPTION_CANNOT_BE_CONTINUED;
          }

          return Constants.S_OK;
        }
        catch (System.Exception e)
        {
          LoggingUtils.HandleException (e);

          return Constants.E_FAIL;
        }
      }

      int IDebugExceptionEvent2.GetExceptionDescription (out string pbstrDescription)
      {
        pbstrDescription = m_exceptionDescription;

        return Constants.S_OK;
      }

      int IDebugExceptionEvent2.PassToDebuggee (int fPass)
      {
        return Constants.E_NOTIMPL;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    [ComVisible (true)]
    [ClassInterface (ClassInterfaceType.None)]
    [InheritGuid (typeof (IDebugOutputStringEvent2))]
    public sealed class OutputString : AsynchronousDebugEvent, IDebugEvent2, IDebugOutputStringEvent2
    {
      private readonly string m_outputString;

      public OutputString (string outputString)
      {
        m_outputString = outputString;
      }

      int IDebugOutputStringEvent2.GetString (out string pbstrString)
      {
        pbstrString = m_outputString;

        return Constants.S_OK;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    [ComVisible (true)]
    [ClassInterface (ClassInterfaceType.None)]
    [InheritGuid (typeof (IDebugModuleLoadEvent2))]
    public sealed class ModuleLoad : AsynchronousDebugEvent, IDebugEvent2, IDebugModuleLoadEvent2
    {
      private readonly IDebugModule2 m_debugModule;

      private readonly bool m_loadModule;

      public ModuleLoad (IDebugModule2 debugModule, bool loadModule)
      {
        m_debugModule = debugModule;

        m_loadModule = loadModule;
      }

      int IDebugModuleLoadEvent2.GetModule (out IDebugModule2 module, ref string debugMessage, ref int fIsLoad)
      {
        LoggingUtils.PrintFunction ();

        module = m_debugModule;

        try
        {
          MODULE_INFO [] moduleInfo = new MODULE_INFO [1];

          LoggingUtils.RequireOk (module.GetInfo (enum_MODULE_INFO_FIELDS.MIF_NAME | enum_MODULE_INFO_FIELDS.MIF_LOADADDRESS, moduleInfo));

          debugMessage = string.Format ("{0}: {1}", ((m_loadModule) ? "Loaded" : "Unloaded"), moduleInfo [0].m_bstrName);

          fIsLoad = (m_loadModule) ? 1 : 0;

          return Constants.S_OK;
        }
        catch (System.Exception e)
        {
          LoggingUtils.HandleException (e);

          return Constants.E_FAIL; 
        }
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    [ComVisible (true)]
    [ClassInterface (ClassInterfaceType.None)]
    [InheritGuid (typeof (IDebugSymbolSearchEvent2))]
    public sealed class SymbolSearch : AsynchronousDebugEvent, IDebugEvent2, IDebugSymbolSearchEvent2
    {
      private readonly IDebugModule3 m_debugModule;

      private readonly string m_searchInfo;

      private readonly enum_MODULE_INFO_FLAGS m_symbolFlags;

      public SymbolSearch (IDebugModule3 debugModule, string searchInfo)
      {
        m_debugModule = debugModule;

        m_searchInfo = searchInfo;

        m_symbolFlags = enum_MODULE_INFO_FLAGS.MIF_SYMBOLS_LOADED;
      }

      int IDebugSymbolSearchEvent2.GetSymbolSearchInfo (out IDebugModule3 pModule, ref string pbstrDebugMessage, enum_MODULE_INFO_FLAGS [] pdwModuleInfoFlags)
      {
        LoggingUtils.PrintFunction ();

        pModule = m_debugModule;

        pbstrDebugMessage = m_searchInfo;

        pdwModuleInfoFlags [0] = m_symbolFlags;

        return Constants.S_OK;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    [ComVisible (true)]
    [ClassInterface (ClassInterfaceType.None)]
    [InheritGuid (typeof (IDebugBeforeSymbolSearchEvent2))]
    public sealed class BeforeSymbolSearch : AsynchronousDebugEvent, IDebugEvent2, IDebugBeforeSymbolSearchEvent2
    {
      private readonly IDebugModule2 m_debugModule;

      public BeforeSymbolSearch (IDebugModule2 module)
      {
        m_debugModule = module;
      }

      int IDebugBeforeSymbolSearchEvent2.GetModuleName (out string pbstrModuleName)
      {
        LoggingUtils.PrintFunction ();

        try
        {
          MODULE_INFO [] moduleInfo = new MODULE_INFO [1];

          LoggingUtils.RequireOk (m_debugModule.GetInfo (enum_MODULE_INFO_FIELDS.MIF_NAME, moduleInfo));

          pbstrModuleName = moduleInfo [0].m_bstrName;

          return Constants.S_OK;
        }
        catch (System.Exception e)
        {
          LoggingUtils.HandleException (e);

          pbstrModuleName = string.Empty;

          return Constants.E_FAIL;
        }
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    [ComVisible (true)]
    [ClassInterface (ClassInterfaceType.None)]
    [InheritGuid (typeof (IDebugPropertyCreateEvent2))]
    public sealed class PropertyCreate : AsynchronousDebugEvent, IDebugEvent2, IDebugPropertyCreateEvent2
    {
      private readonly IDebugProperty2 m_debugProperty;

      public PropertyCreate (IDebugProperty2 property)
      {
        m_debugProperty = property;
      }

      int IDebugPropertyCreateEvent2.GetDebugProperty (out IDebugProperty2 ppProperty)
      {
        LoggingUtils.PrintFunction ();

        ppProperty = m_debugProperty;

        return Constants.S_OK;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    [ComVisible (true)]
    [ClassInterface (ClassInterfaceType.None)]
    [InheritGuid (typeof (IDebugPropertyDestroyEvent2))]
    public sealed class PropertyDestroy : AsynchronousDebugEvent, IDebugEvent2, IDebugPropertyDestroyEvent2
    {
      private readonly IDebugProperty2 m_debugProperty;

      public PropertyDestroy (IDebugProperty2 property)
      {
        m_debugProperty = property;
      }

      int IDebugPropertyDestroyEvent2.GetDebugProperty (out IDebugProperty2 ppProperty)
      {
        LoggingUtils.PrintFunction ();

        ppProperty = m_debugProperty;

        return Constants.S_OK;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    [ComVisible (true)]
    [ClassInterface (ClassInterfaceType.None)]
    [InheritGuid (typeof (IDebugBreakpointBoundEvent2))]
    public sealed class BreakpointBound : AsynchronousDebugEvent, IDebugEvent2, IDebugBreakpointBoundEvent2
    {
      private readonly IDebugPendingBreakpoint2 m_pendingBreakpoint;

      private readonly IDebugBoundBreakpoint2 m_boundBreakpoint;

      public BreakpointBound (IDebugPendingBreakpoint2 pendingBreakpoint, IDebugBoundBreakpoint2 boundBreakpoint)
      {
        m_pendingBreakpoint = pendingBreakpoint;

        m_boundBreakpoint = boundBreakpoint;
      }

      int IDebugBreakpointBoundEvent2.EnumBoundBreakpoints (out IEnumDebugBoundBreakpoints2 ppEnum)
      {
        LoggingUtils.PrintFunction ();

        List<IDebugBoundBreakpoint2> boundBreakpoints = new List<IDebugBoundBreakpoint2> (1);

        boundBreakpoints.Add (m_boundBreakpoint);

        ppEnum = new DebuggeeBreakpointBound.Enumerator (boundBreakpoints);

        return Constants.S_OK;
      }

      int IDebugBreakpointBoundEvent2.GetPendingBreakpoint (out IDebugPendingBreakpoint2 ppPendingBP)
      {
        LoggingUtils.PrintFunction ();

        ppPendingBP = m_pendingBreakpoint;

        return Constants.S_OK;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    [ComVisible (true)]
    [ClassInterface (ClassInterfaceType.None)]
    [InheritGuid (typeof (IDebugBreakpointUnboundEvent2))]
    public sealed class BreakpointUnbound : AsynchronousDebugEvent, IDebugEvent2, IDebugBreakpointUnboundEvent2
    {
      private readonly IDebugBoundBreakpoint2 m_boundBreakpoint;

      public BreakpointUnbound (IDebugBoundBreakpoint2 boundBreakpoint)
      {
        m_boundBreakpoint = boundBreakpoint;
      }

      int IDebugBreakpointUnboundEvent2.GetBreakpoint (out IDebugBoundBreakpoint2 ppBP)
      {
        LoggingUtils.PrintFunction ();

        ppBP = m_boundBreakpoint;

        return Constants.S_OK;
      }

      int IDebugBreakpointUnboundEvent2.GetReason (enum_BP_UNBOUND_REASON [] pdwUnboundReason)
      {
        LoggingUtils.PrintFunction ();

        pdwUnboundReason [0] = enum_BP_UNBOUND_REASON.BPUR_UNKNOWN;

        return Constants.S_OK;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    [ComVisible (true)]
    [ClassInterface (ClassInterfaceType.None)]
    [InheritGuid (typeof (IDebugBreakpointErrorEvent2))]
    public sealed class BreakpointError : AsynchronousDebugEvent, IDebugEvent2, IDebugBreakpointErrorEvent2
    {
      private IDebugErrorBreakpoint2 m_errorBreakpoint;

      public BreakpointError (IDebugErrorBreakpoint2 errorBreakpoint)
      {
        m_errorBreakpoint = errorBreakpoint;
      }

      int IDebugBreakpointErrorEvent2.GetErrorBreakpoint (out IDebugErrorBreakpoint2 ppErrorBP)
      {
        LoggingUtils.PrintFunction ();

        ppErrorBP = m_errorBreakpoint;

        return Constants.S_OK; 
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    [ComVisible (true)]
    [ClassInterface (ClassInterfaceType.None)]
    [InheritGuid (typeof (IDebugExpressionEvaluationCompleteEvent2))]
    public sealed class ExpressionEvaluationComplete : AsynchronousDebugEvent, IDebugEvent2, IDebugExpressionEvaluationCompleteEvent2
    {
      private readonly IDebugExpression2 m_debugExpression;

      private readonly IDebugProperty2 m_debugProperty;

      public ExpressionEvaluationComplete (IDebugExpression2 expression, IDebugProperty2 property)
      {
        m_debugExpression = expression;

        m_debugProperty = property;
      }

      int IDebugExpressionEvaluationCompleteEvent2.GetExpression (out IDebugExpression2 ppExpr)
      {
        LoggingUtils.PrintFunction ();

        ppExpr = m_debugExpression;

        return Constants.S_OK;
      }

      int IDebugExpressionEvaluationCompleteEvent2.GetResult (out IDebugProperty2 ppResult)
      {
        LoggingUtils.PrintFunction ();

        ppResult = m_debugProperty;

        return Constants.S_OK;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    [ComVisible (true)]
    [ClassInterface (ClassInterfaceType.None)]
    [InheritGuid (typeof (IDebugReturnValueEvent2))]
    public sealed class ReturnValue : AsynchronousDebugEvent, IDebugEvent2, IDebugReturnValueEvent2
    {
      private readonly IDebugProperty2 m_debugProperty;

      public ReturnValue (IDebugProperty2 property)
      {
        m_debugProperty = property;
      }

      int IDebugReturnValueEvent2.GetReturnValue (out IDebugProperty2 ppReturnValue)
      {
        LoggingUtils.PrintFunction ();

        ppReturnValue = m_debugProperty;

        return Constants.S_OK;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    [ComVisible (true)]
    [ClassInterface (ClassInterfaceType.None)]
    [InheritGuid (typeof (IDebugNoSymbolsEvent2))]
    public sealed class NoSymbols : AsynchronousDebugEvent, IDebugEvent2, IDebugNoSymbolsEvent2
    {
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    [ComVisible (true)]
    [ClassInterface (ClassInterfaceType.None)]
    [InheritGuid (typeof (IDebugProgramNameChangedEvent2))]
    public sealed class ProgramNameChanged : AsynchronousDebugEvent, IDebugEvent2, IDebugProgramNameChangedEvent2
    {
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    [ComVisible (true)]
    [ClassInterface (ClassInterfaceType.None)]
    [InheritGuid (typeof (IDebugThreadNameChangedEvent2))]
    public sealed class ThreadNameChanged : AsynchronousDebugEvent, IDebugEvent2, IDebugThreadNameChangedEvent2
    {
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    [InheritGuid (typeof (IDebugMessageEvent2))]
    public sealed class Message : AsynchronousDebugEvent, IDebugEvent2, IDebugMessageEvent2
    {
      private readonly string m_userMessage;

      private readonly bool m_msgBoxPrompt;

      private uint m_userResponse;

      public Message (string userMessage, bool msgBoxPrompt)
      {
        m_userMessage = userMessage;

        m_msgBoxPrompt = msgBoxPrompt;

        m_userResponse = 0xFFFFFFFF;
      }

      int IDebugMessageEvent2.GetMessage (enum_MESSAGETYPE [] pMessageType, out string pbstrMessage, out uint pdwType, out string pbstrHelpFileName, out uint pdwHelpId)
      {
        pMessageType [0] = ((m_msgBoxPrompt) ? enum_MESSAGETYPE.MT_MESSAGEBOX : enum_MESSAGETYPE.MT_OUTPUTSTRING) & enum_MESSAGETYPE.MT_TYPE_MASK;

        pbstrMessage = m_userMessage;

        pdwType = 0;

        pbstrHelpFileName = string.Empty;

        pdwHelpId = 0;

        return Constants.S_OK;
      }

      int IDebugMessageEvent2.SetResponse (uint dwResponse)
      {
        m_userResponse = dwResponse;

        return Constants.S_OK;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    [ComVisible (true)]
    [ClassInterface (ClassInterfaceType.None)]
    [InheritGuid (typeof (IDebugErrorEvent2))]
    public sealed class Error : AsynchronousDebugEvent, IDebugEvent2, IDebugErrorEvent2
    {
      private readonly string m_errorMessage;

      private readonly bool m_errorIsCritical;

      public Error (string errorMessage, bool critical)
      {
        m_errorMessage = errorMessage;

        m_errorIsCritical = critical;
      }

      public int GetErrorMessage (enum_MESSAGETYPE [] pMessageType, out string pbstrErrorFormat, out int phrErrorReason, out uint pdwType, out string pbstrHelpFileName, out uint pdwHelpId)
      {
        LoggingUtils.PrintFunction ();

        pMessageType [0] = ((m_errorIsCritical) ? enum_MESSAGETYPE.MT_MESSAGEBOX : enum_MESSAGETYPE.MT_OUTPUTSTRING) & enum_MESSAGETYPE.MT_TYPE_MASK;

        pbstrErrorFormat = m_errorMessage;

        phrErrorReason = 0;

        pdwType = 0x10;

        pbstrHelpFileName = string.Empty;

        pdwHelpId = 0;

        return Constants.S_OK;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    [ComVisible (true)]
    [ClassInterface (ClassInterfaceType.None)]
    [InheritGuid (typeof (IDebugActivateDocumentEvent2))]
    public sealed class ActivateDocument : AsynchronousDebugEvent, IDebugEvent2, IDebugActivateDocumentEvent2
    {
      private readonly IDebugDocument2 m_document;

      private readonly IDebugDocumentContext2 m_documentContext;

      public ActivateDocument (IDebugDocument2 document, IDebugDocumentContext2 documentContext)
      {
        m_document = document;

        m_documentContext = documentContext;
      }

      int IDebugActivateDocumentEvent2.GetDocument (out IDebugDocument2 ppDoc)
      {
        LoggingUtils.PrintFunction ();

        ppDoc = m_document;

        return Constants.S_OK;
      }

      int IDebugActivateDocumentEvent2.GetDocumentContext (out IDebugDocumentContext2 ppDocContext)
      {
        LoggingUtils.PrintFunction ();

        ppDocContext = m_documentContext;

        return Constants.S_OK;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    [ComVisible (true)]
    [ClassInterface (ClassInterfaceType.None)]
    [InheritGuid (typeof (IDebugInterceptExceptionCompleteEvent2))]
    public sealed class InterceptExceptionComplete : AsynchronousDebugEvent, IDebugEvent2, IDebugInterceptExceptionCompleteEvent2
    {
      private readonly ulong m_interceptCookie;

      public InterceptExceptionComplete (ulong cookie)
      {
        m_interceptCookie = cookie;
      }

      int IDebugInterceptExceptionCompleteEvent2.GetInterceptCookie (out ulong pqwCookie)
      {
        LoggingUtils.PrintFunction ();

        pqwCookie = m_interceptCookie;

        return Constants.S_OK;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    [ComVisible (true)]
    [ClassInterface (ClassInterfaceType.None)]
    [InheritGuid (typeof (IDebugAttachCompleteEvent2))]
    public sealed class AttachComplete : SynchronousDebugEvent, IDebugEvent2, IDebugAttachCompleteEvent2
    {
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    [ComVisible (true)]
    [ClassInterface (ClassInterfaceType.None)]
    [InheritGuid (typeof (IDebugFuncEvalAbortedEvent2))]
    public sealed class FuncEvalAborted : AsynchronousDebugEvent, IDebugEvent2, IDebugFuncEvalAbortedEvent2
    {
      private readonly string m_functionName;

      private readonly FUNC_EVAL_ABORT_RESULT m_abortResult;

      public FuncEvalAborted (string functionName, FUNC_EVAL_ABORT_RESULT abortResult)
      {
        m_functionName = functionName;

        m_abortResult = abortResult;
      }

      int IDebugFuncEvalAbortedEvent2.GetAbortResult (FUNC_EVAL_ABORT_RESULT [] pResult)
      {
        LoggingUtils.PrintFunction ();

        pResult [0] = m_abortResult;

        return Constants.S_OK;
      }

      int IDebugFuncEvalAbortedEvent2.GetFunctionName (out string pbstrFunctionName)
      {
        LoggingUtils.PrintFunction ();

        pbstrFunctionName = m_functionName;

        return Constants.S_OK;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    [ComVisible (true)]
    [ClassInterface (ClassInterfaceType.None)]
    [InheritGuid (typeof (IDebugStopCompleteEvent2))]
    public sealed class StopComplete : SynchronousStopDebugEvent, IDebugEvent2, IDebugStopCompleteEvent2
    {

    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#if false
    [ComVisible (true)]
    [ClassInterface (ClassInterfaceType.None)]
    [InheritGuid (typeof (IDebugSessionEvent2))]
    public sealed class Session : AsynchronousStopDebugEvent, IDebugEvent2, IDebugSessionEvent2
    {
    }
#endif

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    [ComVisible (true)]
    [ClassInterface (ClassInterfaceType.None)]
    [Guid ("4A6700A3-A51E-43AE-8F35-945170451454")]
    public sealed class DebuggerLogcatEvent : AsynchronousDebugEvent, IDebugEvent2
    {
      public DebuggerLogcatEvent (AndroidDevice device)
      {
        HostDevice = device;
      }

      public AndroidDevice HostDevice { get; private set; }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    [ComVisible (true)]
    [ClassInterface (ClassInterfaceType.None)]
    [Guid ("DA9A360F-0380-41EB-8BC8-70996E9072BE")]
    public sealed class DebuggerConnectionEvent : AsynchronousDebugEvent, IDebugEvent2
    {
      public enum EventType
      {
        ShowDialog,
        CloseDialog,
        LogStatus,
        LogError,
      };

      public DebuggerConnectionEvent (EventType type, string message)
      {
        Type = type;

        Message = message;
      }

      public EventType Type { get; private set; }

      public string Message { get; private set; }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
