////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using Microsoft.VisualStudio.Debugger.Interop;
using AndroidPlusPlus.Common;
using AndroidPlusPlus.VsDebugCommon;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace AndroidPlusPlus.VsDebugEngine
{

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  public class DebuggeeProperty : IDebugProperty2
  {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public sealed class Enumerator : DebugEnumerator<DEBUG_PROPERTY_INFO, IEnumDebugPropertyInfo2>, IEnumDebugPropertyInfo2
    {
      public Enumerator (ICollection<DEBUG_PROPERTY_INFO> properties)
        : base (properties)
      {
      }

      public int Next (uint celt, DEBUG_PROPERTY_INFO [] rgelt, out uint celtFetched)
      {
        uint tempCeltFetched = 0;

        int result = base.Next (celt, rgelt, ref tempCeltFetched);

        celtFetched = tempCeltFetched;

        return result;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public class Filters
    {
      public static Guid guidFilterAllLocals = new Guid ("196db21f-5f22-45a9-b5a3-32cddb30db06");

      public static Guid guidFilterAllLocalsPlusArgs = new Guid ("939729a8-4cb0-4647-9831-7ff465240d5f");

      public static Guid guidFilterArgs = new Guid ("804bccea-0475-4ae7-8a46-1862688ab863");

      public static Guid guidFilterAutoRegisters = new Guid ("38fc3258-d4d8-401e-a638-779a0145e906");

      public static Guid guidFilterLocals = new Guid ("b200f725-e725-4c53-b36a-1ec27aef12ef");

      public static Guid guidFilterLocalsPlusArgs = new Guid ("e74721bb-10c0-40f5-807f-920d37f95419");

      public static Guid guidFilterRegisters = new Guid ("223ae797-bd09-4f28-8241-2763bdc5f713");
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected readonly DebugEngine m_debugEngine;

    protected DebuggeeStackFrame m_stackFrame;

    protected readonly string m_expression;

    protected readonly string m_fullExpression;

    protected readonly string m_value;

    protected DebuggeeProperty m_parent;

    protected readonly List <DebuggeeProperty> m_children;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public DebuggeeProperty (DebugEngine engine, DebuggeeStackFrame stackFrame, string expression, string value)
    {
      m_debugEngine = engine;

      m_stackFrame = stackFrame;

      if (string.IsNullOrEmpty (expression))
      {
        throw new ArgumentNullException (nameof(expression));
      }

      m_expression = expression;

      m_value = value;

      m_parent = null;

      m_children = new List<DebuggeeProperty> ();

      //
      // Compound parental expressions to evaluate this property's full identifier.
      //

      StringBuilder expressionBuilder = new StringBuilder (2048);

      DebuggeeProperty parent = m_parent;

      while (parent != null)
      {
        expressionBuilder.Append (parent.m_expression + ".");

        parent = parent.m_parent;
      }

      expressionBuilder.Append (m_expression);

      m_fullExpression = expressionBuilder.ToString ();
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public DebuggeeProperty (DebuggeeProperty parent, string expression)
      : this (parent.m_debugEngine, parent.m_stackFrame, expression, string.Empty)
    {
      m_parent = parent;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int AddChildren (DebuggeeProperty [] children)
    {
      LoggingUtils.PrintFunction ();

      try
      {
        if (children == null)
        {
          throw new ArgumentNullException (nameof(children));
        }

        m_children.AddRange (children);

        return Constants.S_OK;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        return Constants.E_FAIL;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    #region IDebugProperty2 Members

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public virtual int EnumChildren (enum_DEBUGPROP_INFO_FLAGS dwFields, uint dwRadix, ref Guid guidFilter, enum_DBG_ATTRIB_FLAGS dwAttribFilter, string pszNameFilter, uint dwTimeout, out IEnumDebugPropertyInfo2 ppEnum)
    {
      //
      // Enumerates the children of a property. This provides support for dereferencing pointers, displaying members of an array, or fields of a class or struct.
      //

      LoggingUtils.PrintFunction ();

      try
      {
        List<DEBUG_PROPERTY_INFO> childPropertyInfo = new List<DEBUG_PROPERTY_INFO> ();

        List<DebuggeeProperty> childRegisterProperties = new List<DebuggeeProperty> ();

        foreach (DebuggeeProperty child in m_children)
        {
          bool displayProperty = false;

          DEBUG_PROPERTY_INFO [] infoArray = new DEBUG_PROPERTY_INFO [1];

          LoggingUtils.RequireOk (child.GetPropertyInfo (dwFields, dwRadix, dwTimeout, null, 0, infoArray));

          if ((guidFilter == DebuggeeProperty.Filters.guidFilterRegisters)
            || (guidFilter == DebuggeeProperty.Filters.guidFilterAutoRegisters))
          {
            if ((infoArray [0].dwAttrib & enum_DBG_ATTRIB_FLAGS.DBG_ATTRIB_STORAGE_REGISTER) != 0)
            {
              childRegisterProperties.Add (child);
            }
          }
          else if ((guidFilter == DebuggeeProperty.Filters.guidFilterArgs)
            || (guidFilter == DebuggeeProperty.Filters.guidFilterAllLocalsPlusArgs)
            || (guidFilter == DebuggeeProperty.Filters.guidFilterLocalsPlusArgs))
          {
            displayProperty |= ((infoArray [0].dwAttrib & enum_DBG_ATTRIB_FLAGS.DBG_ATTRIB_DATA) != 0);
          }
          else if ((guidFilter == DebuggeeProperty.Filters.guidFilterAllLocals)
            || (guidFilter == DebuggeeProperty.Filters.guidFilterAllLocalsPlusArgs)
            || (guidFilter == DebuggeeProperty.Filters.guidFilterLocals)
            || (guidFilter == DebuggeeProperty.Filters.guidFilterLocalsPlusArgs))
          {
            displayProperty |= ((infoArray [0].dwAttrib & enum_DBG_ATTRIB_FLAGS.DBG_ATTRIB_DATA) != 0);
          }
          else
          {
            displayProperty = true;
          }

          /*if ((infoArray [0].dwAttrib & dwAttribFilter) != 0)
          {
            displayProperty = false;
          }*/

          if (displayProperty)
          {
            childPropertyInfo.Add (infoArray [0]);
          }
        }

        if ((guidFilter == DebuggeeProperty.Filters.guidFilterRegisters)
            || (guidFilter == DebuggeeProperty.Filters.guidFilterAutoRegisters))
        {
          //
          //
          // Registers must be specified in a collection/list as children of a 'CPU' property.
          //
          // Other types documented: https://msdn.microsoft.com/en-us/library/aa290860(v=vs.71).aspx
          //

          DebuggeeProperty registersProperty = new DebuggeeProperty (m_debugEngine, m_stackFrame, "CPU", string.Empty);

          LoggingUtils.RequireOk (registersProperty.AddChildren (childRegisterProperties.ToArray ()));

          DEBUG_PROPERTY_INFO [] infoArray = new DEBUG_PROPERTY_INFO [1];

          LoggingUtils.RequireOk (registersProperty.GetPropertyInfo (dwFields, dwRadix, dwTimeout, null, 0, infoArray));

          childPropertyInfo.Add (infoArray [0]);
        }

        ppEnum = new DebuggeeProperty.Enumerator (childPropertyInfo);

        return Constants.S_OK;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        ppEnum = null;

        return Constants.E_FAIL;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public virtual int GetDerivedMostProperty (out IDebugProperty2 derivedMostProperty)
    {
      //
      // Returns the property that describes the most-derived property of a property. This is called to support object oriented languages.
      // It allows the debug engine to return an IDebugProperty2 for the most-derived object in a hierarchy.
      //

      LoggingUtils.PrintFunction ();

      derivedMostProperty = null;

      return Constants.S_GETDERIVEDMOST_NO_DERIVED_MOST;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public virtual int GetExtendedInfo (ref Guid extendedInfoGuid, out object extendedInfo)
    {
      //
      // Retrieves information that does not lend itself to being retrieved by calling the IDebugProperty2::GetPropertyInfo method.
      // This includes information about custom viewers, managed type slots and other information.
      //

      LoggingUtils.PrintFunction ();

      extendedInfo = null;

      return Constants.S_GETEXTENDEDINFO_NO_EXTENDEDINFO;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public virtual int GetMemoryBytes (out IDebugMemoryBytes2 memoryBytes)
    {
      //
      // Returns the memory bytes for a property value.
      //

      LoggingUtils.PrintFunction ();

      memoryBytes = null;

      return Constants.S_GETMEMORYBYTES_NO_MEMORY_BYTES;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public virtual int GetMemoryContext (out IDebugMemoryContext2 memoryContext)
    {
      //
      // Returns the memory context for a property value.
      //

      LoggingUtils.PrintFunction ();

      memoryContext = null;

      return Constants.S_GETMEMORYCONTEXT_NO_MEMORY_CONTEXT;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public virtual int GetParent (out IDebugProperty2 parentProperty)
    {
      //
      // Returns the parent of this property.
      //

      LoggingUtils.PrintFunction ();

      parentProperty = null;

      try
      {
        parentProperty = m_parent ?? throw new InvalidOperationException ();

        return Constants.S_OK;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        return Constants.S_GETPARENT_NO_PARENT;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public virtual int GetPropertyInfo (enum_DEBUGPROP_INFO_FLAGS requestedFields, uint radix, uint timeout, IDebugReference2 [] debugReferenceArray, uint argumentCount, DEBUG_PROPERTY_INFO [] propertyInfoArray)
    {
      //
      // Fills in a DEBUG_PROPERTY_INFO structure that describes a property.
      //

      LoggingUtils.PrintFunction ();

      try
      {
        if ((requestedFields & enum_DEBUGPROP_INFO_FLAGS.DEBUGPROP_INFO_FULLNAME) != 0)
        {
          propertyInfoArray [0].bstrFullName = m_fullExpression;

          propertyInfoArray [0].dwFields |= enum_DEBUGPROP_INFO_FLAGS.DEBUGPROP_INFO_FULLNAME;
        }

        if ((requestedFields & enum_DEBUGPROP_INFO_FLAGS.DEBUGPROP_INFO_NAME) != 0)
        {
          propertyInfoArray [0].bstrName = m_expression;

          propertyInfoArray [0].dwFields |= enum_DEBUGPROP_INFO_FLAGS.DEBUGPROP_INFO_NAME;
        }

        if ((requestedFields & enum_DEBUGPROP_INFO_FLAGS.DEBUGPROP_INFO_TYPE) != 0)
        {
          propertyInfoArray [0].bstrType = "<unknown type>";

          propertyInfoArray [0].dwFields |= enum_DEBUGPROP_INFO_FLAGS.DEBUGPROP_INFO_TYPE;
        }

        if ((requestedFields & enum_DEBUGPROP_INFO_FLAGS.DEBUGPROP_INFO_VALUE) != 0)
        {
          if ((requestedFields & enum_DEBUGPROP_INFO_FLAGS.DEBUGPROP_INFO_VALUE_AUTOEXPAND) != 0)
          {
          }

          if ((requestedFields & enum_DEBUGPROP_INFO_FLAGS.DEBUGPROP_INFO_VALUE_RAW) != 0)
          {
          }

          if ((requestedFields & enum_DEBUGPROP_INFO_FLAGS.DEBUGPROP_INFO_VALUE_NO_TOSTRING) != 0)
          {
          }

          propertyInfoArray [0].bstrValue = m_value;

          propertyInfoArray [0].dwFields |= enum_DEBUGPROP_INFO_FLAGS.DEBUGPROP_INFO_VALUE;
        }

        if ((requestedFields & enum_DEBUGPROP_INFO_FLAGS.DEBUGPROP_INFO_ATTRIB) != 0)
        {
          if ((m_children != null) && (m_children.Count > 0))
          {
            propertyInfoArray [0].dwAttrib |= enum_DBG_ATTRIB_FLAGS.DBG_ATTRIB_OBJ_IS_EXPANDABLE;
          }

          if (m_expression.StartsWith ("$")) // Register. '$r0'
          {
            propertyInfoArray [0].dwAttrib |= enum_DBG_ATTRIB_FLAGS.DBG_ATTRIB_STORAGE_REGISTER;
          }

          propertyInfoArray [0].dwFields |= enum_DEBUGPROP_INFO_FLAGS.DEBUGPROP_INFO_ATTRIB;
        }

        if ((requestedFields & enum_DEBUGPROP_INFO_FLAGS.DEBUGPROP_INFO_PROP) != 0)
        {
          propertyInfoArray [0].pProperty = this;

          propertyInfoArray [0].dwFields |= enum_DEBUGPROP_INFO_FLAGS.DEBUGPROP_INFO_PROP;
        }

        if ((requestedFields & enum_DEBUGPROP_INFO_FLAGS.DEBUGPROP_INFO_NO_NONPUBLIC_MEMBERS) != 0)
        {
        }

        return Constants.S_OK;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        return Constants.E_FAIL;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public virtual int GetReference (out IDebugReference2 debugReference)
    {
      //
      //  Return an IDebugReference2 for this property. An IDebugReference2 can be thought of as a type and an address.
      //

      LoggingUtils.PrintFunction ();

      debugReference = null;

      return Constants.E_GETREFERENCE_NO_REFERENCE;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public virtual int GetSize (out uint size)
    {
      //
      // Returns the size, in bytes, of the property value.
      //

      LoggingUtils.PrintFunction ();

      size = 0;

      return Constants.S_GETSIZE_NO_SIZE;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public virtual int SetValueAsReference (IDebugReference2 [] debugReferenceArray, uint argumentCount, IDebugReference2 debugReferenceValue, uint timeout)
    {
      //
      // Sets the value of the property from the value of a given reference.
      //

      LoggingUtils.PrintFunction ();

      return Constants.E_SETVALUEASREFERENCE_NOTSUPPORTED;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public virtual int SetValueAsString (string value, uint radix, uint timeout)
    {
      //
      // Sets the value of a property from a string.
      //

      LoggingUtils.PrintFunction ();

      return Constants.E_NOTIMPL;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    #endregion

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
