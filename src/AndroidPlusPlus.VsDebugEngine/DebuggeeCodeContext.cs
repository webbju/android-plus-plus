////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using AndroidPlusPlus.Common;
using AndroidPlusPlus.VsDebugCommon;
using Microsoft.VisualStudio.Debugger.Interop;
using System;
using System.Collections.Generic;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace AndroidPlusPlus.VsDebugEngine
{

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  //
  // An implementation of IDebugCodeContext2 and IDebugMemoryContext2.
  // IDebugMemoryContext2 represents a position in the address space of the machine running the program being debugged.
  // IDebugCodeContext2 represents the starting position of a code instruction.
  // For most run-time architectures today, a code context can be thought of as an address in a program's execution stream.
  //

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  public class DebuggeeCodeContext : IDebugCodeContext2, IDebugMemoryContext2
  {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public class Enumerator : DebugEnumerator<IDebugCodeContext2, IEnumDebugCodeContexts2>, IEnumDebugCodeContexts2
    {
      public Enumerator (ICollection<IDebugCodeContext2> contexts)
        : base (contexts)
      {
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected readonly DebugEngine m_engine;

    protected DebuggeeDocumentContext m_documentContext;

    protected DebuggeeAddress m_address;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public DebuggeeCodeContext (DebugEngine engine, DebuggeeDocumentContext documentContext, DebuggeeAddress address)
    {
      m_engine = engine;

      m_documentContext = documentContext ?? throw new ArgumentNullException (nameof(documentContext));

      m_address = address ?? throw new ArgumentNullException (nameof(address));
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public DebuggeeDocumentContext DocumentContext
    {
      get
      {
        return m_documentContext;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public DebuggeeAddress Address
    {
      get
      {
        return m_address;
      }
      set
      {
        m_address = value;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected virtual int SetInfo (enum_CONTEXT_INFO_FIELDS requestedFields, CONTEXT_INFO [] infoArray)
    {
      LoggingUtils.PrintFunction ();

      try
      {
        if ((requestedFields & enum_CONTEXT_INFO_FIELDS.CIF_MODULEURL) != 0)
        {
          infoArray [0].bstrModuleUrl = "<module>";

          infoArray [0].dwFields |= enum_CONTEXT_INFO_FIELDS.CIF_MODULEURL;
        }

        if ((requestedFields & enum_CONTEXT_INFO_FIELDS.CIF_FUNCTION) != 0)
        {
          infoArray [0].bstrFunction = "<function>";

          infoArray [0].dwFields |= enum_CONTEXT_INFO_FIELDS.CIF_FUNCTION;
        }

        if ((requestedFields & enum_CONTEXT_INFO_FIELDS.CIF_FUNCTIONOFFSET) != 0)
        {
          infoArray [0].posFunctionOffset.dwLine = 0;

          infoArray [0].posFunctionOffset.dwColumn = 0;

          infoArray [0].dwFields |= enum_CONTEXT_INFO_FIELDS.CIF_FUNCTIONOFFSET;
        }

        if ((requestedFields & enum_CONTEXT_INFO_FIELDS.CIF_ADDRESS) != 0)
        {
          infoArray [0].bstrAddress = m_address.ToString ();

          infoArray [0].dwFields |= enum_CONTEXT_INFO_FIELDS.CIF_ADDRESS;
        }

        if ((requestedFields & enum_CONTEXT_INFO_FIELDS.CIF_ADDRESSOFFSET) != 0)
        {
          infoArray [0].bstrAddressOffset = "0x0";

          infoArray [0].dwFields |= enum_CONTEXT_INFO_FIELDS.CIF_ADDRESSOFFSET;
        }

        if ((requestedFields & enum_CONTEXT_INFO_FIELDS.CIF_ADDRESSABSOLUTE) != 0)
        {
          infoArray [0].bstrAddressAbsolute = m_address.ToString ();

          infoArray [0].dwFields |= enum_CONTEXT_INFO_FIELDS.CIF_ADDRESSABSOLUTE;
        }

        return Constants.S_OK;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        return Constants.E_FAIL;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    #region IDebugMemoryContext2 Members

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int Add (ulong count, out IDebugMemoryContext2 offsetAddressContext)
    {
      //
      // Adds a specified value to the current context's address to create a new context.
      //

      LoggingUtils.PrintFunction ();

      try
      {
        DebuggeeAddress offsetAddress = m_address.Add (count);

        offsetAddressContext = new DebuggeeCodeContext (m_engine, DocumentContext, offsetAddress);

       return Constants.S_OK;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        offsetAddressContext = null;

        return Constants.E_FAIL;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int Subtract (ulong count, out IDebugMemoryContext2 offsetAddressContext)
    {
      //
      // Subtracts a specified value to the current context's address to create a new context.
      //

      LoggingUtils.PrintFunction ();

      try
      {
        DebuggeeAddress offsetAddress = m_address.Subtract (count);

        offsetAddressContext = new DebuggeeCodeContext (m_engine, DocumentContext, offsetAddress);

        return Constants.S_OK;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        offsetAddressContext = null;

        return Constants.E_FAIL;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int Compare (enum_CONTEXT_COMPARE contextCompare, IDebugMemoryContext2 [] compareToItems, uint compareToLength, out uint foundIndex)
    {
      //
      // Compares the memory context to each context in the given array in the manner indicated by compare flags,
      // returning an index of the first context that matches.
      //

      LoggingUtils.PrintFunction ();

      try
      {
        if (compareToItems.Length != compareToLength)
        {
          throw new ArgumentException ("Comparing contexts of different sizes.");
        }

        //
        // Get the context info for the current object.
        //

        CONTEXT_INFO [] currentContextInfo = new CONTEXT_INFO [1];

        LoggingUtils.RequireOk (GetInfo (enum_CONTEXT_INFO_FIELDS.CIF_ALLFIELDS, currentContextInfo));

        for (uint i = 0; i < compareToLength; ++i)
        {
          DebuggeeCodeContext compareTo = compareToItems [i] as DebuggeeCodeContext;

          if (compareTo == null)
          {
            continue;
          }

          CONTEXT_INFO [] compareToInfo = new CONTEXT_INFO [1];

          LoggingUtils.RequireOk (compareTo.GetInfo (enum_CONTEXT_INFO_FIELDS.CIF_ALLFIELDS, compareToInfo));

          if (!DebugEngine.ReferenceEquals (m_engine, compareTo.m_engine))
          {
            continue;
          }

          bool comparisonResult = false;

          switch (contextCompare)
          {
            case enum_CONTEXT_COMPARE.CONTEXT_EQUAL:
            {
              comparisonResult = (currentContextInfo [0].bstrAddressAbsolute.CompareTo (compareToInfo [0].bstrAddressAbsolute) == 0);

              break;
            }

            case enum_CONTEXT_COMPARE.CONTEXT_LESS_THAN:
            {
              comparisonResult = (currentContextInfo [0].bstrAddressAbsolute.CompareTo (compareToInfo [0].bstrAddressAbsolute) < 0);

              break;
            }

            case enum_CONTEXT_COMPARE.CONTEXT_GREATER_THAN:
            {
              comparisonResult = (currentContextInfo [0].bstrAddressAbsolute.CompareTo (compareToInfo [0].bstrAddressAbsolute) > 0);

              break;
            }

            case enum_CONTEXT_COMPARE.CONTEXT_LESS_THAN_OR_EQUAL:
            {
              comparisonResult = (currentContextInfo [0].bstrAddressAbsolute.CompareTo (compareToInfo [0].bstrAddressAbsolute) <= 0);

              break;
            }

            case enum_CONTEXT_COMPARE.CONTEXT_GREATER_THAN_OR_EQUAL:
            {
              comparisonResult = (currentContextInfo [0].bstrAddressAbsolute.CompareTo (compareToInfo [0].bstrAddressAbsolute) >= 0);

              break;
            }

            case enum_CONTEXT_COMPARE.CONTEXT_SAME_PROCESS:
            {
              comparisonResult = true;

              break;
            }

            case enum_CONTEXT_COMPARE.CONTEXT_SAME_FUNCTION:
            {
              comparisonResult = (currentContextInfo [0].bstrFunction.CompareTo (compareToInfo [0].bstrFunction) == 0);

              break;
            }

            case enum_CONTEXT_COMPARE.CONTEXT_SAME_MODULE:
            {
              comparisonResult = (currentContextInfo [0].bstrModuleUrl.CompareTo (compareToInfo [0].bstrModuleUrl) == 0);

              break;
            }

            case enum_CONTEXT_COMPARE.CONTEXT_SAME_SCOPE:
              // Fallthrough.
            default:
            {
              throw new NotImplementedException ();
            }
          }

          if (comparisonResult)
          {
            foundIndex = i;

            return Constants.S_OK;
          }
        }
      }
      catch (NotImplementedException e)
      {
        LoggingUtils.HandleException (e);

        foundIndex = uint.MaxValue;

        return Constants.E_NOTIMPL;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        foundIndex = uint.MaxValue;

        return Constants.E_COMPARE_CANNOT_COMPARE;
      }

      foundIndex = uint.MaxValue;

      return Constants.S_FALSE;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int GetName (out string contextName)
    {
      //
      // Gets the user-displayable name for this context
      //

      LoggingUtils.PrintFunction ();

      try
      {
        CONTEXT_INFO [] contextInfoArray = new CONTEXT_INFO [1];

        LoggingUtils.RequireOk (GetInfo (enum_CONTEXT_INFO_FIELDS.CIF_ADDRESSABSOLUTE, contextInfoArray));

        contextName = contextInfoArray [0].bstrAddressAbsolute;

        return Constants.S_OK;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        contextName = string.Empty;

        return Constants.E_FAIL;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int GetInfo (enum_CONTEXT_INFO_FIELDS requestedFields, CONTEXT_INFO [] infoArray)
    {
      //
      // Gets information that describes this context.
      //

      LoggingUtils.PrintFunction ();

      try
      {
        LoggingUtils.RequireOk (SetInfo (requestedFields, infoArray));

        return Constants.S_OK;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        return Constants.E_FAIL;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    #endregion

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    #region IDebugCodeContext2 Members

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int GetDocumentContext (out IDebugDocumentContext2 documentContext)
    {
      //
      // Gets the document context for this code-context.
      //

      LoggingUtils.PrintFunction ();

      try
      {
        documentContext = DocumentContext;

        return Constants.S_OK;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        documentContext = null;

        return Constants.E_FAIL;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int GetLanguageInfo (ref string languageName, ref Guid languageGuid)
    {
      //
      // Gets the language information for this code context.
      //

      LoggingUtils.PrintFunction ();

      try
      {
        IDebugDocumentContext2 documentContext;

        languageGuid = DebugEngineGuids.guidLanguageUnknown;

        languageName = DebugEngineGuids.GetLanguageName (languageGuid);

        LoggingUtils.RequireOk (GetDocumentContext (out documentContext));

        if (documentContext != null)
        {
          LoggingUtils.RequireOk (documentContext.GetLanguageInfo (ref languageName, ref languageGuid));
        }

        return Constants.S_OK;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        return Constants.E_FAIL;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    #endregion

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    #region IDebugCodeContext100 Members

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int GetProgram (out IDebugProgram2 program)
    {
      LoggingUtils.PrintFunction ();

      try
      {
        program = m_engine.Program ?? throw new InvalidOperationException ();

        return Constants.S_OK;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        program = null;

        return Constants.E_FAIL;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    #endregion

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }

}
