////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using AndroidPlusPlus.Common;
using Microsoft.VisualStudio.ProjectSystem;
using Microsoft.VisualStudio.ProjectSystem.Properties;
using System;
using System.Collections.Generic;
using System.ComponentModel.Composition;
using System.Threading.Tasks;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace AndroidPlusPlus.VsDebugLauncher.Rules
{

  [Export]

  [AppliesTo(ProjectCapabilities.VisualC)]

  internal partial class RuleProperties : StronglyTypedPropertyAccess
  {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    [ImportingConstructor]
    public RuleProperties ([Import(RequiredCreationPolicy = CreationPolicy.Shared)] ConfiguredProject configuredProject)
        : base(configuredProject)
    {
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public RuleProperties (ConfiguredProject configuredProject, string file, string itemType, string itemName)
        : base(configuredProject, file, itemType, itemName)
    {
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public RuleProperties (ConfiguredProject configuredProject, IProjectPropertiesContext projectPropertiesContext)
        : base(configuredProject, projectPropertiesContext)
    {
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public RuleProperties (ConfiguredProject configuredProject, UnconfiguredProject unconfiguredProject)
        : base(configuredProject, unconfiguredProject)
    {
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public ConfiguredProject GetConfiguredProject ()
    {
      return ConfiguredProject;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public async Task<System.Collections.Immutable.IImmutableDictionary<string, IPropertyPagesCatalog>> ExposeGetNamedCatalogsAsync ()
    {
      return await GetNamedCatalogsAsync ();
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public async Task<Dictionary <string, string>> ProjectPropertiesToDictionaryAsync ()
    {
      LoggingUtils.PrintFunction ();

      var evaluatedProperties = new Dictionary<string, string> ();

      var catalogs = await GetNamedCatalogsAsync ();

      foreach (var catalog in catalogs)
      {
        var catalogPropertySchemas = catalog.Value.GetPropertyPagesSchemas ();

        foreach (string schema in catalogPropertySchemas)
        {
          var schemaRules = catalog.Value.BindToContext (schema, File, ItemType, ItemName);

          foreach (var property in schemaRules.Properties)
          {
            try
            {
              if (property.DataSource.Persistence.Equals ("ProjectInstance"))
              {
                continue; // Exceptions are thrown when trying to query the values of properties with 'ProjectInstance' persistence.
              }

              if (property is IEvaluatedProperty evaluatedProperty)
              {
                string schemaGroupedKey = schema + "." + property.Name;

                evaluatedProperties[schemaGroupedKey] = await evaluatedProperty.GetEvaluatedValueAsync();
              }
            }
            catch (Exception e)
            {
              LoggingUtils.HandleException(e);
            }
          }
        }
      }

      return evaluatedProperties;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


  }

}
