////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections;
using System.Collections.Generic;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace AndroidPlusPlus.Common
{

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  public class MiVariable : IDisposable
  {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    private Dictionary<string, MiVariable> m_children = new Dictionary<string, MiVariable> ();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public MiVariable (string name, string expression)
    {
      LoggingUtils.PrintFunction ();

      if (string.IsNullOrEmpty (name))
      {
        throw new ArgumentNullException (nameof(name));
      }

      Name = name;

      Expression = expression;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public MiVariable (string expression, List <MiResultValue> variableValues)
    {
      LoggingUtils.PrintFunction ();

      if (string.IsNullOrEmpty (expression))
      {
        throw new ArgumentNullException (nameof(expression));
      }

      Expression = expression;

      Name = string.Empty;

      Type = string.Empty;

      ThreadId = 0;

      Dynamic = false;

      HasChildren = false;

      Value = string.Empty;

      Populate (variableValues);

      if (string.IsNullOrEmpty (Name))
      {
        throw new InvalidOperationException ("Variable has invalid/empty name");
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public void Dispose ()
    {
      Dispose (true);

      GC.SuppressFinalize (this);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected virtual void Dispose (bool disposing)
    {
      if (disposing)
      {

      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public string Expression { get; protected set; }

    public string Name { get; protected set; }

    public string Type { get; protected set; }

    public uint ThreadId { get; protected set; }

    public bool Dynamic { get; protected set; }

    public bool HasChildren { get; protected set; }

    public string Value { get; protected set; }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public Dictionary<string, MiVariable> Children
    {
      get
      {
        return m_children;
      }
    }

    public bool IsPseudoChild
    {
      get
      {
        switch (Expression)
        {
          case "public":
          case "protected":
          case "private":
          {
            return true;
          }
        }

        return false;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public void Populate (List<MiResultValue> variableValues)
    {
      LoggingUtils.PrintFunction ();

      if (variableValues == null)
      {
        throw new ArgumentNullException (nameof(variableValues));
      }

      foreach (MiResultValue resultValue in variableValues)
      {
        if (resultValue.HasField ("name"))
        {
          Name = resultValue ["name"] [0].GetString ();
        }

        if (resultValue.HasField ("exp"))
        {
          Expression = resultValue ["exp"] [0].GetString ();
        }

        if (resultValue.HasField ("type"))
        {
          Type = resultValue ["type"] [0].GetString ();
        }

        if (resultValue.HasField ("new_type"))
        {
          Type = resultValue ["new_type"] [0].GetString ();
        }

        if (resultValue.HasField ("thread-id"))
        {
          ThreadId = resultValue ["thread-id"] [0].GetUnsignedInt ();
        }

        if (resultValue.HasField ("dynamic"))
        {
          Dynamic = (resultValue ["dynamic"] [0].GetUnsignedInt () == 1);
        }

        if (Dynamic && (resultValue.HasField ("has_more")))
        {
          HasChildren = (resultValue ["has_more"] [0].GetUnsignedInt () != 0);
        }
        else
        {
          if (resultValue.HasField ("numchild"))
          {
            HasChildren = (resultValue ["numchild"] [0].GetUnsignedInt () != 0);
          }

          if (resultValue.HasField ("new_num_children"))
          {
            HasChildren = (resultValue ["new_num_children"] [0].GetUnsignedInt () != 0);
          }
        }

        if (resultValue.HasField ("value"))
        {
          Value = resultValue ["value"] [0].GetString ();
        }
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public void AddChild (MiVariable variable)
    {
      LoggingUtils.PrintFunction ();

      if (variable == null)
      {
        throw new ArgumentNullException (nameof(variable));
      }

      m_children [variable.Name] = variable;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
