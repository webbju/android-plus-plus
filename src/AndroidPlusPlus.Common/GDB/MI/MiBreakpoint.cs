////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Globalization;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace AndroidPlusPlus.Common
{

  public class MiBreakpoint
  {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public const ulong Pending = ulong.MinValue;

    public const ulong Multiple = ulong.MaxValue;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /*public MiBreakpoint (uint id, ulong address)
    {
      ID = id;

      Address = address;
    }*/

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public MiBreakpoint (List<MiResultValue> breakpointValues)
    {
      Populate (breakpointValues);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public void Populate (List<MiResultValue> breakpointValues)
    {
      LoggingUtils.PrintFunction ();

      if (breakpointValues == null)
      {
        throw new ArgumentNullException (nameof(breakpointValues));
      }

      foreach (MiResultValue resultValue in breakpointValues)
      {
        if (resultValue.HasField ("number"))
        {
          ID = resultValue ["number"] [0].GetUnsignedInt ();
        }

        if (resultValue.HasField ("type"))
        {
          Type = resultValue ["type"] [0].GetString ();
        }

        if (resultValue.HasField ("disp"))
        {
          Disposition = resultValue ["disp"] [0].GetString ();
        }

        if (resultValue.HasField ("enabled"))
        {
          Enabled = (resultValue ["enabled"] [0].GetString ().Equals ("y"));
        }

        if (resultValue.HasField ("addr"))
        {
          string addr = resultValue ["addr"] [0].GetString ();

          bool pending = addr.Equals ("<PENDING>");

          bool multiple = addr.Equals ("<MULTIPLE>");

          if (pending)
          {
            Address = Pending;
          }
          else if (multiple)
          {
            Address = Multiple;
          }
          else
          {
            if (addr.ToLower ().StartsWith ("0x"))
            {
              Address = ulong.Parse (addr.Substring (2), NumberStyles.HexNumber);
            }
            else
            {
              Address = ulong.Parse (addr, NumberStyles.HexNumber);
            }
          }
        }

        if (resultValue.HasField ("func"))
        {
          Function = resultValue ["func"] [0].GetString ();
        }

        if (resultValue.HasField ("filename"))
        {
          Filename = resultValue ["filename"] [0].GetString ();
        }

        if (resultValue.HasField ("fullname"))
        {
          Fullname = resultValue ["fullname"] [0].GetString ();
        }

        if (resultValue.HasField ("line"))
        {
          Line = resultValue ["line"] [0].GetUnsignedInt ();
        }
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public uint ID { get; protected set; }

    public string Type { get; protected set; }

    public string Disposition { get; protected set; }

    public bool Enabled { get; protected set; }

    public ulong Address { get; set; }

    public string Function { get; protected set; }

    public string Filename { get; protected set; }

    public string Fullname { get; protected set; }

    public uint Line { get; protected set; }

    public bool IsPending => Address == Pending;

    public bool IsMultiple => Address == Multiple;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }

}
