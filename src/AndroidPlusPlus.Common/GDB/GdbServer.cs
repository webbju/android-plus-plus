////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace AndroidPlusPlus.Common
{

  public class GdbServer : RedirectEventListener, IDisposable
  {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    private readonly GdbSetup m_gdbSetup;

    private AsyncRedirectProcess m_gdbServerInstance;

    private ManualResetEvent m_gdbServerAttached;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public GdbServer (GdbSetup gdbSetup)
    {
      LoggingUtils.PrintFunction ();

      m_gdbSetup = gdbSetup;

      m_gdbServerInstance = null;

      m_gdbServerAttached = null;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public void Dispose ()
    {
      Dispose (true);

      GC.SuppressFinalize (this);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected virtual void Dispose (bool disposing)
    {
      if (disposing)
      {
        if (m_gdbServerInstance != null)
        {
          m_gdbServerInstance.Dispose ();

          m_gdbServerInstance = null;
        }

        if (m_gdbServerAttached != null)
        {
          m_gdbServerAttached.Dispose ();

          m_gdbServerAttached = null;
        }
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public async Task Start (CancellationToken cancellationToken = default)
    {
      LoggingUtils.PrintFunction ();

      // 
      // Check the target 'gdbserver' binary exists on target device/emulator.
      // 

      AndroidDevice device = m_gdbSetup.Process.HostDevice;

      var potentialGdbServerPaths = new HashSet<string> ();

      potentialGdbServerPaths.UnionWith(m_gdbSetup.Process.GetNativeLibraryAbiPaths().Select(path => $"{path}/gdbserver"));

      // 
      // If we can't find a bundled 'gdbserver' binary, attempt to find one in the NDK.
      // 

      if (!potentialGdbServerPaths.Any())
      {
        foreach (string path in m_gdbSetup.Process.GetNativeLibraryAbiPaths())
        {
          try
          {
            string shortAbi = path.Substring(path.LastIndexOf('/') + 1);

            string local = Path.Combine(AndroidSettings.NdkRoot, $@"prebuilt\android-{shortAbi}\gdbserver\gdbserver");

            string remote = $"/data/local/tmp/gdbserver-{shortAbi}";

            await AndroidAdb.Push(device, local, remote);

            potentialGdbServerPaths.Add(remote);
          }
          catch (Exception e)
          {
            LoggingUtils.HandleException(e);
          }
        }
      }

      if (!potentialGdbServerPaths.Any())
      {
        throw new InvalidOperationException ($"Failed to locate required 'gdbserver' binary on device ({device.ID}).");
      }

      await KillActiveGdbServerSessions ();

      // 
      // Construct a adaptive command line based on GdbSetup requirements.
      // 

      StringBuilder commandLineArgumentsBuilder = new StringBuilder ();

      commandLineArgumentsBuilder.AppendFormat ("run-as {0} {1} ", m_gdbSetup.Process.Name, potentialGdbServerPaths.First());

      if (!string.IsNullOrWhiteSpace (m_gdbSetup.Socket))
      {
        commandLineArgumentsBuilder.AppendFormat ("+{0} ", m_gdbSetup.Socket);
      }

      commandLineArgumentsBuilder.Append ("--attach ");

      if (string.IsNullOrWhiteSpace (m_gdbSetup.Socket)) // Don't need a host if we have a bound socket?
      {
        commandLineArgumentsBuilder.AppendFormat ("{0}:{1} ", m_gdbSetup.Host, m_gdbSetup.Port);
      }

      commandLineArgumentsBuilder.Append (m_gdbSetup.Process.Pid);

      // 
      // Launch 'gdbserver' and wait for output to determine success.
      // 

      var waitForConnectionTimer = new Stopwatch();

      m_gdbServerAttached = new ManualResetEvent (false);

      m_gdbServerInstance = new AsyncRedirectProcess(AndroidAdb.AdbExe, $"-s {device.ID} shell {commandLineArgumentsBuilder}");

      m_gdbServerInstance.Start (this);

      waitForConnectionTimer.Start();

      /*var gdbServerInstance = AndroidAdb.AdbCommand().WithArguments($"-s {device.ID} shell {commandLineArgumentsBuilder}");

      await foreach (CommandEvent gdbServerEvent in gdbServerInstance.ListenAsync(cancellationToken))
      {
        switch (gdbServerEvent)
        {
          case StartedCommandEvent started:
            {
              LoggingUtils.Print(string.Format("[GdbServer] Waiting to attach..."));

              break;
            }
          case StandardOutputCommandEvent stdOut:
            {
              if (stdOut.Text.Contains("Attached;"))
              {
                m_gdbServerAttached.Set();
              }

              break;
            }
          case StandardErrorCommandEvent stdErr:
            {
              break;
            }

          case ExitedCommandEvent exited:
            {
              LoggingUtils.Print($"[GdbServer] ProcessExited with exit code: {exited.ExitCode}");

              m_gdbServerAttached.Reset();

              break;
            }
        }
      }*/

      uint timeout = 5000;

      bool responseSignaled = false;

      while ((!responseSignaled) && (waitForConnectionTimer.ElapsedMilliseconds < timeout))
      {
        responseSignaled = m_gdbServerAttached.WaitOne (0);

        if (!responseSignaled)
        {
          Thread.Sleep (100);
        }
      }

      if (!responseSignaled)
      {
        throw new TimeoutException ("Timed out waiting for GdbServer to execute.");
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public bool WaitAttached(int milliseconds)
    {
      return m_gdbServerAttached.WaitOne(milliseconds);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public void Kill ()
    {
      LoggingUtils.PrintFunction ();

      try
      {
        if (m_gdbServerInstance != null)
        {
          m_gdbServerInstance.Kill ();
        }
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    private async Task KillActiveGdbServerSessions ()
    {
      LoggingUtils.PrintFunction ();

      AndroidDevice device = m_gdbSetup.Process.HostDevice;

      foreach (var process in await AndroidAdb.ProcessesSnapshot(device, ""))
      {
        if (process.Value.Name.Contains ("lib/gdbserver"))
        {
          LoggingUtils.Print($"[{GetType().Name}] Attempting to terminate existing GDB debugging session: {process.Key}");

          await AndroidAdb.AdbCommand().WithArguments($"-s {device.ID} shell run-as {m_gdbSetup.Process.Name} kill -9 {process.Key}").ExecuteAsync();
        }
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public void ProcessStdout (object sendingProcess, DataReceivedEventArgs args)
    {
      if (string.IsNullOrEmpty (args.Data))
      {
        return;
      }

      //LoggingUtils.Print(string.Format("[GdbServer] ProcessStdout: {0}", args.Data));

      if (args.Data.Contains("Attached;"))
      {
        m_gdbServerAttached.Set();
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public void ProcessStderr (object sendingProcess, DataReceivedEventArgs args)
    {
      if (string.IsNullOrEmpty (args.Data))
      {
        return;
      }

      //LoggingUtils.Print(string.Format("[GdbServer] ProcessStderr: {0}", args.Data));

      if (args.Data.Contains("Attached;"))
      {
        m_gdbServerAttached.Set();
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public void ProcessExited (object sendingProcess, EventArgs args)
    {
      m_gdbServerAttached.Reset();

      LoggingUtils.Print (string.Format ("[GdbServer] ProcessExited"));
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }

}
