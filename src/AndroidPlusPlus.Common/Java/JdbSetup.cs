////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Net;
using System.Net.Sockets;
using System.Threading;
using System.Threading.Tasks;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace AndroidPlusPlus.Common
{

  public sealed class JdbSetup
  {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public JdbSetup (AndroidProcess process)
    {
      LoggingUtils.PrintFunction ();

      Process = process;

      Host = "localhost";

      Port = RandomAvailablePort();

      string sanitisedDeviceId = Process.HostDevice.ID.Replace (':', '-');

      CacheDirectory = string.Format (@"{0}\Android++\Cache\{1}\{2}", Environment.GetFolderPath (Environment.SpecialFolder.LocalApplicationData), sanitisedDeviceId, Process.Name);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public AndroidProcess Process { get; private set; }

    public string Host { get; private set; }

    public uint Port { get; private set; }

    public string CacheDirectory { get; private set; }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public async Task SetupPortForwardingAsync (CancellationToken cancellationToken = default)
    {
      LoggingUtils.PrintFunction();

      await AndroidAdb.AdbCommand().WithArguments($"-s {Process.HostDevice.ID} forward --no-rebind tcp:{Port} jdwp:{Process.Pid}").ExecuteAsync(cancellationToken);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public async Task ClearPortForwardingAsync (CancellationToken cancellationToken = default)
    {
      LoggingUtils.PrintFunction();

      await AndroidAdb.AdbCommand().WithArguments($"-s {Process.HostDevice.ID} forward --remove tcp:{Port}").WithValidation(CliWrap.CommandResultValidation.None).ExecuteAsync(cancellationToken);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    private static uint RandomAvailablePort(uint defaultPort = 65534)
    {
      uint availablePort = defaultPort;

      try
      {
        var listener = new TcpListener(IPAddress.Loopback, 0);

        listener.Start();

        availablePort = (uint)((IPEndPoint)listener.LocalEndpoint).Port;

        listener.Stop();
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException(e);
      }

      return availablePort;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }

}
