////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Diagnostics;
using System.IO;
using System.Threading;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace AndroidPlusPlus.Common
{

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  public class AsyncRedirectProcess : IDisposable
  {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public interface IEventListener
    {
      void ProcessStdout (object sendingProcess, DataReceivedEventArgs args);

      void ProcessStderr (object sendingProcess, DataReceivedEventArgs args);

      void ProcessExited (object sendingProcess, EventArgs args);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected int m_startTicks = 0;

    protected int m_exitCode = -1;

    protected ManualResetEvent m_exitMutex = null;

    protected int m_lastOutputTimestamp = 0;

    protected TextWriter m_stdInputWriter = null;

    protected AsyncProcess m_process;

    protected IEventListener m_listener = null;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public AsyncRedirectProcess (string filename, string arguments, string workingDirectory = null)
    {
      if (string.IsNullOrEmpty (filename))
      {
        throw new ArgumentNullException (nameof(filename));
      }

      if (!File.Exists (filename))
      {
        throw new FileNotFoundException ("Could not find target executable.", filename);
      }

      StartInfo = CreateDefaultStartInfo ();

      StartInfo.FileName = filename;

      StartInfo.Arguments = arguments;

      StartInfo.WorkingDirectory = workingDirectory ?? Path.GetDirectoryName (filename);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public ProcessStartInfo StartInfo { get; set; }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public void Dispose ()
    {
      Dispose (true);

      GC.SuppressFinalize (this);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected virtual void Dispose (bool disposing)
    {
      if (disposing)
      {
        if (m_process != null)
        {
          m_process.Dispose ();

          m_process = null;
        }

        if (m_exitMutex != null)
        {
          m_exitMutex.Dispose ();

          m_exitMutex = null;
        }
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected static ProcessStartInfo CreateDefaultStartInfo ()
    {
      LoggingUtils.PrintFunction ();

      ProcessStartInfo startInfo = new ProcessStartInfo
      {
        CreateNoWindow = true,

        UseShellExecute = false,

        LoadUserProfile = false,

        ErrorDialog = false,

        RedirectStandardOutput = true,

        RedirectStandardError = true,

        RedirectStandardInput = true
      };

      return startInfo;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public void Start (IEventListener listener)
    {
      m_startTicks = Environment.TickCount;

      m_lastOutputTimestamp = m_startTicks;

      m_exitMutex = new ManualResetEvent (false);

      m_listener = listener;

      m_process = new AsyncProcess
      {
        StartInfo = StartInfo
      };

      m_process.OutputDataReceived += new DataReceivedEventHandler (ProcessStdout);

      m_process.ErrorDataReceived += new DataReceivedEventHandler (ProcessStderr);

      m_process.Exited += new EventHandler (ProcessExited);

      m_process.EnableRaisingEvents = true;

      LoggingUtils.Print (string.Format ("[AsyncRedirectProcess] Start: {0} (Args=\"{1}\" Pwd=\"{2}\")", m_process.StartInfo.FileName, m_process.StartInfo.Arguments, m_process.StartInfo.WorkingDirectory));

      if (!m_process.Start ())
      {
        m_exitMutex.Set ();

        throw new InvalidOperationException ("Could not spawn async process - " + m_process.StartInfo.FileName);
      }

      m_process.BeginOutputReadLine ();

      m_process.BeginErrorReadLine ();

      m_stdInputWriter = TextWriter.Synchronized (m_process.StandardInput);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public void Kill ()
    {
      LoggingUtils.PrintFunction ();

      try
      {
        if ((m_process != null) && (!m_process.HasExited))
        {
          m_process.Kill ();
        }
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public virtual void SendCommand (string command)
    {
      LoggingUtils.Print (string.Format ("[AsyncRedirectProcess] SendCommand: {0}", command));

      if (string.IsNullOrWhiteSpace (command))
      {
        throw new ArgumentNullException (nameof(command));
      }

      if (m_stdInputWriter == null)
      {
        throw new InvalidOperationException ("No input writer stream bound. Process has not been started");
      }

      m_stdInputWriter.WriteLine (command);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected void ProcessStdout (object sendingProcess, DataReceivedEventArgs args)
    {
#if DEBUG && false
      LoggingUtils.Print (string.Format ("[AsyncRedirectProcess] ProcessStdout: {0}", args.Data));
#endif

      try
      {
        m_lastOutputTimestamp = Environment.TickCount;

        if (m_listener != null)
        {
          m_listener.ProcessStdout (sendingProcess, args);
        }
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected void ProcessStderr (object sendingProcess, DataReceivedEventArgs args)
    {
      LoggingUtils.Print (string.Format ("[AsyncRedirectProcess] ProcessStderr: {0}", args.Data));

      try
      {
        m_lastOutputTimestamp = Environment.TickCount;

        if (m_listener != null)
        {
          m_listener.ProcessStderr (sendingProcess, args);
        }
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected void ProcessExited (object sendingProcess, EventArgs args)
    {
      try
      {
        try
        {
          if ((m_process != null) && (m_exitCode == -1))
          {
            m_exitCode = m_process.ExitCode;
          }
        }
        catch (InvalidOperationException)
        {
          // Ignore: 'No process is associated with this object'.
        }

        if (m_exitMutex != null)
        {
          m_exitMutex.Set ();
        }

        if (m_listener != null)
        {
          m_listener.ProcessExited (sendingProcess, args);
        }
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);
      }
      finally
      {
        LoggingUtils.Print (string.Format ("[AsyncRedirectProcess] {0} exited ({1}) in {2} ms", StartInfo.FileName, m_exitCode, Environment.TickCount - m_startTicks));

        Dispose ();
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
