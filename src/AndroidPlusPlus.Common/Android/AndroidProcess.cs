////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.IO;
using System.Threading;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace AndroidPlusPlus.Common
{

  public class AndroidProcess
  {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public AndroidProcess (AndroidDevice device, string name, uint pid, uint ppid, string user)
    {
      HostDevice = device ?? throw new ArgumentNullException (nameof(device));

      Name = name ?? throw new ArgumentNullException(nameof(name));

      Pid = pid;

      ParentPid = ppid;

      User = user ?? throw new ArgumentNullException(nameof(user));
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public AndroidDevice HostDevice { get; protected set; }

    public string User { get; protected set; }

    public uint Pid { get; protected set; }

    public uint ParentPid { get; protected set; }

    public string Name { get; protected set; }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    private const string CODE_PATH_EXPRESSION = "codePath=";

    private const string RESOURCE_PATH_EXPRESSION = "resourcePath=";

    private const string DATA_DIR_EXPRESSION = "dataDir=";

    private const string NATIVE_LIBRARY_PATH_EXPRESSION = "nativeLibraryPath=";

    private const string LEGACY_NATIVE_LIBRARY_DIR_EXPRESSION = "legacyNativeLibraryDir=";

    private const string PRIMARY_CPU_ABI_EXPRESSION = "primaryCpuAbi=";

    private const string SECONDARY_CPU_ABI_EXPRESSION = "secondaryCpuAbi=";

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    private Dictionary<string, string> m_dumpsysProperties = new Dictionary<string, string>();

    private void LazyEvaluateDumpsysProperties(CancellationToken cancellationToken = default)
    {
      try
      {
        var command = new SyncRedirectProcess(AndroidAdb.AdbExe, $"-s {HostDevice.ID} shell dumpsys package {Name}");

        command.StartAndWaitForExit();

        using var reader = new StringReader(command.StandardOutput);

        for (string line = reader.ReadLine(); !string.IsNullOrEmpty(line); line = reader.ReadLine())
        {
          line = line.Trim(); // remove leading and trailing whitespace

          if (!m_dumpsysProperties.ContainsKey("codePath") && line.StartsWith(CODE_PATH_EXPRESSION))
          {
            m_dumpsysProperties.Add("codePath", line.Substring(CODE_PATH_EXPRESSION.Length));
          }
          else if (!m_dumpsysProperties.ContainsKey("dataDir") && line.StartsWith(DATA_DIR_EXPRESSION))
          {
            m_dumpsysProperties.Add("dataDir", line.Substring(DATA_DIR_EXPRESSION.Length));
          }
          else if (!m_dumpsysProperties.ContainsKey("resourcePath") && line.StartsWith(RESOURCE_PATH_EXPRESSION))
          {
            m_dumpsysProperties.Add("resourcePath", line.Substring(RESOURCE_PATH_EXPRESSION.Length));
          }
          else if (!m_dumpsysProperties.ContainsKey("nativeLibraryPath") && line.StartsWith(NATIVE_LIBRARY_PATH_EXPRESSION))
          {
            m_dumpsysProperties.Add("nativeLibraryPath", line.Substring(NATIVE_LIBRARY_PATH_EXPRESSION.Length));
          }
          else if (!m_dumpsysProperties.ContainsKey("legacyNativeLibraryDir") && line.StartsWith(LEGACY_NATIVE_LIBRARY_DIR_EXPRESSION))
          {
            m_dumpsysProperties.Add("legacyNativeLibraryDir", line.Substring(LEGACY_NATIVE_LIBRARY_DIR_EXPRESSION.Length));
          }
          else if (!m_dumpsysProperties.ContainsKey("primaryCpuAbi") && line.StartsWith(PRIMARY_CPU_ABI_EXPRESSION))
          {
            m_dumpsysProperties.Add("primaryCpuAbi", line.Substring(PRIMARY_CPU_ABI_EXPRESSION.Length));
          }
          else if (!m_dumpsysProperties.ContainsKey("secondaryCpuAbi") && line.StartsWith(SECONDARY_CPU_ABI_EXPRESSION))
          {
            m_dumpsysProperties.Add("secondaryCpuAbi", line.Substring(SECONDARY_CPU_ABI_EXPRESSION.Length));
          }
        }
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException(e);
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public string GetCodePath()
    {
      if (!m_dumpsysProperties.ContainsKey("codePath"))
      {
        LazyEvaluateDumpsysProperties();
      }

      if (!m_dumpsysProperties.TryGetValue("codePath", out string codePath) || string.IsNullOrEmpty(codePath))
      {
        codePath = GetDataDirectory();
      }

      return codePath;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public string GetDataDirectory()
    {
      if (!m_dumpsysProperties.ContainsKey("dataDir"))
      {
        LazyEvaluateDumpsysProperties();
      }

      if (!m_dumpsysProperties.TryGetValue("dataDir", out string dataDir) || string.IsNullOrEmpty(dataDir))
      {
        dataDir = $"/data/data/{Name}";
      }

      return dataDir;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public string GetNativeLibraryDir()
    {
      if (!m_dumpsysProperties.ContainsKey("nativeLibraryDir"))
      {
        LazyEvaluateDumpsysProperties();
      }

      if (!m_dumpsysProperties.TryGetValue("nativeLibraryDir", out string nativeLibraryDir) || string.IsNullOrEmpty(nativeLibraryDir))
      {
        nativeLibraryDir = GetLegacyNativeLibraryDir();
      }

      return nativeLibraryDir;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public string GetLegacyNativeLibraryDir()
    {
      if (!m_dumpsysProperties.ContainsKey("nativeLibraryDir"))
      {
        LazyEvaluateDumpsysProperties();
      }

      if (!m_dumpsysProperties.TryGetValue("legacyNativeLibraryDir", out string legacyNativeLibraryDir) || string.IsNullOrEmpty(legacyNativeLibraryDir))
      {
        legacyNativeLibraryDir = $"{GetCodePath()}/lib";
      }

      return legacyNativeLibraryDir;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public ICollection<string> GetSupportedCpuAbis()
    {
      if (!m_dumpsysProperties.ContainsKey("primaryCpuAbi") || !m_dumpsysProperties.ContainsKey("secondaryCpuAbi"))
      {
        LazyEvaluateDumpsysProperties();
      }

      var processSupportedCpuAbis = new HashSet<string>();

      if (m_dumpsysProperties.TryGetValue("primaryCpuAbi", out string primaryCpuAbi) && !string.IsNullOrEmpty(primaryCpuAbi) && !string.Equals("null", primaryCpuAbi))
      {
        processSupportedCpuAbis.Add(primaryCpuAbi);
      }

      if (m_dumpsysProperties.TryGetValue("secondaryCpuAbi", out string secondaryCpuAbi) && !string.IsNullOrEmpty(secondaryCpuAbi) && !string.Equals("null", secondaryCpuAbi))
      {
        processSupportedCpuAbis.Add(secondaryCpuAbi);
      }

      return processSupportedCpuAbis;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public ICollection<string> GetNativeLibraryAbiPaths()
    {
      var nativeLibraryAbiPaths = new List<string>();

      string nativeLibraryDir = GetNativeLibraryDir();

      foreach (string supportedAbi in GetSupportedCpuAbis())
      {
        string abi = supportedAbi;

        if (abi.Equals("armeabi"))
        {
          abi = "arm";
        }
        else if (abi.Equals("arm64-v8a"))
        {
          abi = "arm64";
        }

        nativeLibraryAbiPaths.Add($"{nativeLibraryDir}/{abi}");
      }

      return nativeLibraryAbiPaths;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public bool IsUserProcess
    {
      get
      {
        //
        // Android 4.1+ applications are designated a user-based app-id (e.g. u0_a60), older SDKs prefer 'app' - assume any without these are a system process.
        //

        return (User.StartsWith ("u") && User.Contains ("_")) || User.StartsWith ("app");
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }

}
