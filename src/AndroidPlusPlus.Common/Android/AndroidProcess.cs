////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.IO;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace AndroidPlusPlus.Common
{

  public class AndroidProcess
  {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public AndroidProcess (AndroidDevice device, string name, uint pid, uint ppid, string user)
    {
      if (string.IsNullOrEmpty(name))
      {
        throw new ArgumentNullException (nameof(name));
      }

      if (string.IsNullOrEmpty (user))
      {
        throw new ArgumentNullException (nameof(user));
      }

      HostDevice = device ?? throw new ArgumentNullException (nameof(device));

      Name = name;

      Pid = pid;

      ParentPid = ppid;

      User = user;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    private string GetPackageManagerDumpEntry(string prefix)
    {
      char[] lineTrim = new char[] { ' ', '\r', '\n' };

      string entry = HostDevice.Shell("pm", $"\"dump {Name} | grep {prefix} | head -1\"").Trim(lineTrim);
      
      if (string.IsNullOrEmpty(entry))
      {
        return entry;
      }

      int index = entry.IndexOf('=');

      return (index == -1) ? entry : entry.Substring(index + 1);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public void RefreshPackageInfo ()
    {
      LoggingUtils.PrintFunction ();

      //
      // Retrieves the install specific (coded) remote APK path.
      //   i.e: /data/app/com.example.hellogdbserver-2.apk
      //

      string remoteAppPath = HostDevice.Shell ("pm", $"\"path {Name} | grep 'package:'\"").Trim(new char [] { '\r', '\n'});

      RemoteApkPath = remoteAppPath.Substring ("package:".Length);

      CodePath = GetPackageManagerDumpEntry("codePath");

      DataDirectory = GetPackageManagerDumpEntry("dataDir");

      NativeLibraryPath = GetPackageManagerDumpEntry("nativeLibraryPath");

      LegacyNativeLibraryPath = GetPackageManagerDumpEntry("legacyNativeLibraryDir");

      if (string.IsNullOrWhiteSpace(LegacyNativeLibraryPath))
      {
        if (HostDevice.SdkVersion >= AndroidSettings.VersionCode.JELLY_BEAN_MR1)
        {
          string bundleId = Path.GetFileNameWithoutExtension(RemoteApkPath);

          LegacyNativeLibraryPath = string.Concat("/data/app-lib/", bundleId);
        }
        else
        {
          LegacyNativeLibraryPath = string.Concat(CodePath, "/lib");
        }
      }

      if (string.IsNullOrWhiteSpace(NativeLibraryPath))
      {
        NativeLibraryPath = LegacyNativeLibraryPath;
      }

      string primaryCpuAbi = GetPackageManagerDumpEntry("primaryCpuAbi");

      string secondaryCpuAbi = GetPackageManagerDumpEntry("secondaryCpuAbi");

      ProcessSupportedCpuAbis ??= new List<string>();

      if (!string.IsNullOrEmpty(primaryCpuAbi) && !string.Equals(primaryCpuAbi, "(null)"))
      {
        ProcessSupportedCpuAbis.Add(primaryCpuAbi);
      }

      if (!string.IsNullOrEmpty(secondaryCpuAbi) && !string.Equals(secondaryCpuAbi, "(null)"))
      {
        ProcessSupportedCpuAbis.Add(secondaryCpuAbi);
      }

      foreach (string abi in HostDevice.SupportedCpuAbis)
      {
        if (!ProcessSupportedCpuAbis.Contains (abi))
        {
          ProcessSupportedCpuAbis.Add (abi);
        }
      }

      NativeLibraryAbiPaths ??= new List<string>();

      foreach (string abi in ProcessSupportedCpuAbis)
      {
        switch (abi)
        {
          case "armeabi":
          case "armeabi-v7a":
          case "arm64-v8a":
          {
            NativeLibraryAbiPaths.Add (string.Concat (NativeLibraryPath, "/", (abi.Equals("arm64-v8a")) ? "arm64" : "arm"));

            break;
          }

          case "x86":
          case "x86_64":
          case "mips":
          case "mips64":
          default:
          {
            NativeLibraryAbiPaths.Add (string.Concat (NativeLibraryPath, "/", abi));

            break;
          }
        }
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public AndroidDevice HostDevice { get; protected set; }

    public string RemoteApkPath { get; protected set; }

    public string CodePath { get; protected set; }

    public string DataDirectory { get; protected set; }

    public string NativeLibraryPath { get; protected set; }

    public string LegacyNativeLibraryPath { get; protected set; }

    public ICollection<string> NativeLibraryAbiPaths {  get; protected set; }

    public ICollection<string> ProcessSupportedCpuAbis { get; protected set; }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public string User { get; protected set; }

    public uint Pid { get; protected set; }

    public uint ParentPid { get; protected set; }

    public string Name { get; protected set; }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public bool IsUserProcess
    {
      get
      {
        //
        // Android 4.1+ applications are designated a user-based app-id (e.g. u0_a60), older SDKs prefer 'app' - assume any without these are a system process.
        //

        return (User.StartsWith ("u") && User.Contains ("_")) || User.StartsWith ("app");
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }

}
