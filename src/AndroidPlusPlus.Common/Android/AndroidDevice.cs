////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Threading.Tasks;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace AndroidPlusPlus.Common
{

  public class AndroidDevice
  {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    private Dictionary<uint, AndroidProcess> m_processesByPid = new Dictionary<uint, AndroidProcess> ();

    private Dictionary<string, AndroidProcess> m_processesByName = new Dictionary<string, AndroidProcess> ();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public AndroidDevice (string deviceId)
    {
      ID = deviceId ?? throw new ArgumentNullException(nameof(deviceId));

      PopulateProperties();
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public string ID { get; protected set; }

    public Dictionary<string, string> Properties { get; protected set; }

    public IEnumerable<AndroidProcess> Processes => m_processesByPid.Values;

    public Dictionary<uint, AndroidProcess> ProcessesByPid => m_processesByPid;

    public Dictionary<string, AndroidProcess> ProcessesByName => m_processesByName;

    public bool IsEmulator => ID.StartsWith ("emulator-", StringComparison.OrdinalIgnoreCase);

    public bool IsOverWiFi => ID.Contains (".");

    public uint SdkVersion => uint.Parse(GetProperty("ro.build.version.sdk"));

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public string GetProperty (string propertyName)
    {
      return Properties.TryGetValue(propertyName, out string propertValue) ? propertValue : string.Empty;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    private async void PopulateProperties ()
    {
      LoggingUtils.PrintFunction();

      Properties = await AndroidAdb.GetProp(this, "");
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public IEnumerable<string> SupportedCpuAbis
    {
      get
      {
        //
        // Queries device's supported CPU ABIs. Fallback to using old-style primary/secondary props if list isn't available.
        //

        string abiList = GetProperty ("ro.product.cpu.abilist");

        if (!string.IsNullOrEmpty (abiList))
        {
          return abiList.Split (',');
        }

        return new string []
        {
          GetProperty ("ro.product.cpu.abi"),
          GetProperty ("ro.product.cpu.abi2")
        };
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }

}
