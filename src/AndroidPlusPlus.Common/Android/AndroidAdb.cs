////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text.RegularExpressions;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace AndroidPlusPlus.Common
{

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  public static class AndroidAdb
  {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public interface IStateListener
    {
      void DeviceConnected (AndroidDevice device);

      void DeviceDisconnected (AndroidDevice device);

      void DevicePervasive (AndroidDevice device);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    private static readonly object m_updateLockMutex = new object ();

    private static Dictionary<string, AndroidDevice> m_connectedDevices = new Dictionary<string, AndroidDevice> ();

    private static List<IStateListener> m_registeredDeviceStateListeners = new List<IStateListener> ();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public static void Refresh ()
    {
      LoggingUtils.PrintFunction ();

      lock (m_updateLockMutex)
      {
        //
        // Start an ADB instance, if required.
        //

        using (var adbStartServer = AdbCommand("start-server", string.Empty))
        {
          adbStartServer.StartAndWaitForExit (30000);
        }

        using var adbDevices = AdbCommand("devices", string.Empty);

        adbDevices.StartAndWaitForExit(30000);

        //
        // Parse 'devices' output, skipping headers and potential 'start-server' output.
        //

        Dictionary<string, string> currentAdbDevices = new Dictionary<string, string>();

        LoggingUtils.Print(string.Concat("[AndroidAdb] Devices output: ", adbDevices.StandardOutput));

        if (!string.IsNullOrEmpty(adbDevices.StandardOutput))
        {
          var deviceOutputLines = adbDevices.StandardOutput.Replace("\r", "").Split(new char[] { '\n' });

          foreach (string line in deviceOutputLines)
          {
            if (Regex.IsMatch(line, "^[A-Za-z0-9.:\\-]+[\t][A-Za-z]+$"))
            {
              var segments = line.Split(new char[] { '\t' });

              string deviceName = segments[0];

              string deviceType = segments[1];

              currentAdbDevices.Add(deviceName, deviceType);
            }
          }
        }

        //
        // First identify any previously tracked devices which aren't in 'devices' output.
        //

        HashSet<string> disconnectedDevices = new HashSet<string>();

        foreach (string key in m_connectedDevices.Keys)
        {
          string deviceName = (string)key;

          if (!currentAdbDevices.ContainsKey(deviceName))
          {
            disconnectedDevices.Add(deviceName);
          }
        }

        //
        // Identify whether any devices have changed state; connected/persisted/disconnected.
        //

        foreach (KeyValuePair<string, string> devicePair in currentAdbDevices)
        {
          string deviceName = devicePair.Key;

          string deviceType = devicePair.Value;

          if (deviceType.Equals("offline", StringComparison.InvariantCultureIgnoreCase))
          {
            disconnectedDevices.Add(deviceName);
          }
          else if (deviceType.Equals("unauthorized", StringComparison.InvariantCultureIgnoreCase))
          {
            // User needs to allow USB debugging.
          }
          else
          {
            if (m_connectedDevices.TryGetValue(deviceName, out AndroidDevice connectedDevice))
            {
              //
              // Device is pervasive. Refresh internal properties.
              //

              LoggingUtils.Print(string.Format("[AndroidAdb] Device pervaded: {0} - {1}", deviceName, deviceType));

              connectedDevice.Refresh();

              foreach (IStateListener deviceListener in m_registeredDeviceStateListeners)
              {
                deviceListener.DevicePervasive(connectedDevice);
              }
            }
            else
            {
              //
              // Device connected.
              //

              LoggingUtils.Print(string.Format("[AndroidAdb] Device connected: {0} - {1}", deviceName, deviceType));

              connectedDevice = new AndroidDevice(deviceName);

              connectedDevice.Refresh();

              m_connectedDevices.Add(deviceName, connectedDevice);

              foreach (IStateListener deviceListener in m_registeredDeviceStateListeners)
              {
                deviceListener.DeviceConnected(connectedDevice);
              }
            }
          }
        }

        //
        // Finally, handle device disconnection.
        //

        foreach (string deviceName in disconnectedDevices)
        {
          if (m_connectedDevices.TryGetValue(deviceName, out AndroidDevice disconnectedDevice))
          {
            LoggingUtils.Print(string.Concat("[AndroidAdb] Device disconnected: ", deviceName));

            m_connectedDevices.Remove(deviceName);

            foreach (IStateListener deviceListener in m_registeredDeviceStateListeners)
            {
              deviceListener.DeviceDisconnected(disconnectedDevice);
            }
          }
        }
      }
    }


    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public static AndroidDevice GetConnectedDeviceById (string id)
    {
      AndroidDevice device = null;

      lock (m_updateLockMutex)
      {
        m_connectedDevices.TryGetValue (id, out device);
      }

      return device;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public static ICollection<AndroidDevice> GetConnectedDevices ()
    {
      lock (m_updateLockMutex)
      {
        return m_connectedDevices.Values;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public static SyncRedirectProcess AdbCommand (string command)
    {
      return AdbCommand(command, string.Empty);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public static SyncRedirectProcess AdbCommand (string command, string arguments)
    {
      LoggingUtils.Print (string.Format ("[AndroidDevice] AdbCommand: Cmd={0} Args={1}", command, arguments));

      var adbCommand = new SyncRedirectProcess (AndroidSettings.SdkRoot + @"\platform-tools\adb.exe", string.Format ("{0} {1}", command, arguments));

      return adbCommand;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public static SyncRedirectProcess AdbCommand (AndroidDevice target, string command, string arguments)
    {
      LoggingUtils.Print (string.Format ("[AndroidDevice] AdbCommand: Target={0} Cmd={1} Args={2}", target.ID, command, arguments));

      var adbCommand = new SyncRedirectProcess (AndroidSettings.SdkRoot + @"\platform-tools\adb.exe", string.Format ("-s {0} {1} {2}", target.ID, command, arguments));

      return adbCommand;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public static AsyncRedirectProcess AdbCommandAsync (AndroidDevice target, string command, string arguments)
    {
      LoggingUtils.Print (string.Format ("[AndroidDevice] AdbCommandAsync: Target={0} Cmd={1} Args={2}", target.ID, command, arguments));

      var adbCommand = new AsyncRedirectProcess (AndroidSettings.SdkRoot + @"\platform-tools\adb.exe", string.Format ("-s {0} {1} {2}", target.ID, command, arguments));

      return adbCommand;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public static bool IsDeviceConnected (AndroidDevice queryDevice)
    {
      return m_connectedDevices.ContainsKey(queryDevice.ID);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public static void RegisterDeviceStateListener (IStateListener listener)
    {
      LoggingUtils.PrintFunction ();

      lock (m_updateLockMutex)
      {
        m_registeredDeviceStateListeners.Add (listener);
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public static void UnregisterDeviceStateListener (IStateListener listener)
    {
      LoggingUtils.PrintFunction ();

      lock (m_updateLockMutex)
      {
        m_registeredDeviceStateListeners.Remove (listener);
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
