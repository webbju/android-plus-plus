<!--
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  *This file is automatically generated. Local changes risk being overwritten by the export process.*

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-->

<Project ToolsVersion="16.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!--
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->

  <Import Project="$(MSBuildThisFileDirectory)\CppBuild.targets" />

  <Import Project="$(MSBuildThisFileDirectory)\CppStubs.targets" />

  <!--
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->

  <UsingTask TaskName="NativeCompile" AssemblyFile="$(ANDROID_PLUS_PLUS)\bin\AndroidPlusPlus.MsBuild.CppTasks.dll" />

  <UsingTask TaskName="NativeLink" AssemblyFile="$(ANDROID_PLUS_PLUS)\bin\AndroidPlusPlus.MsBuild.CppTasks.dll" />

  <UsingTask TaskName="NativeLib" AssemblyFile="$(ANDROID_PLUS_PLUS)\bin\AndroidPlusPlus.MsBuild.CppTasks.dll" />

  <UsingTask TaskName="NativeStrip" AssemblyFile="$(ANDROID_PLUS_PLUS)\bin\AndroidPlusPlus.MsBuild.CppTasks.dll" />

  <UsingTask TaskName="NativeBuildId" AssemblyFile="$(ANDROID_PLUS_PLUS)\bin\AndroidPlusPlus.MsBuild.CppTasks.dll" />

  <UsingTask TaskName="VCMessage" AssemblyName="Microsoft.Build.CppTasks.Common, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />

  <!--
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->

  <PropertyGroup>

    <!--
      Define a custom target to evaluate build requirements and additional dependencies.
    -->

    <PlatformPrepareForBuildDependsOn>PlatformToolsetPrepareForBuild;$(PlatformPrepareForBuildDependsOn)</PlatformPrepareForBuildDependsOn>

    <!--
      Enable incremental build by enable file tracking in tasks.
    -->

    <TrackFileAccess Condition="'$(TrackFileAccess)' == ''">true</TrackFileAccess>

  </PropertyGroup>

  <!--
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->

  <!--
    'ClCompile' based on: MSBuild\Microsoft.Cpp\v4.0\Microsoft.CppCommon.targets
  -->

  <Target Name="ClCompile" Condition="'@(ClCompile)' != ''" DependsOnTargets="SelectClCompile">

    <ItemGroup>
      <ClCompile>
        <PrecompiledHeaderOutputFile Condition="'%(ClCompile.PrecompiledHeader)' == 'NotUsing' or '%(ClCompile.PrecompiledHeader)' == ''"></PrecompiledHeaderOutputFile>
        <PrecompiledHeaderFile Condition="'%(ClCompile.PrecompiledHeader)' == 'NotUsing' or '%(ClCompile.PrecompiledHeader)' == ''"></PrecompiledHeaderFile>

        <CompileAs Condition="('%(ClCompile.CompileAs)' == 'Default' and '%(ClCompile.Extension)' == '.c')">CompileAsC</CompileAs>
        <CompileAs Condition="('%(ClCompile.CompileAs)' == 'Default' and '%(ClCompile.Extension)' == '.s')">CompileAsAsm</CompileAs>
        <CompileAs Condition="('%(ClCompile.CompileAs)' == 'Default' and '%(ClCompile.Extension)' == '.asm')">CompileAsAsm</CompileAs>
        <CompileAs Condition="('%(ClCompile.CompileAs)' == 'Default' and ('%(ClCompile.Extension)' != '.c' and '%(ClCompile.Extension)' != '.s' and '%(ClCompile.Extension)' != '.asm'))">CompileAsCpp</CompileAs>

        <MinimalRebuildFromTracking Condition="'%(ClCompile.MinimalRebuildFromTracking)' == '' and '$(BuildType)' == 'Build' and '$(ForceRebuild)' != 'true'">true</MinimalRebuildFromTracking>

        <!-- 'Inline function limit' and 'Unswitch loops' are not supported by Clang. -->
        <InlineLimitSize Condition="'$(LlvmVersion)' != ''"></InlineLimitSize>
        <UnswitchLoops Condition="'$(LlvmVersion)' != ''"></UnswitchLoops>
      </ClCompile>
      <ClCompile>
        <!-- Enforce compilation of .c sources under straight-C dialect, otherwise we'll get C++ feature errors. -->
        <StandardLanguageDialect Condition="'%(ClCompile.CompileAs)' == 'CompileAsC'">Default</StandardLanguageDialect>
        <ExecutableStack Condition="'%(ClCompile.CompileAs)' == 'CompileAsAsm'">false</ExecutableStack>
      </ClCompile>
    </ItemGroup>

    <!--
      Process all the sources flagged for Pre-Compiled Header (PCH) generation first.
    -->

    <ItemGroup>
      <!-- Create a list of PCH requirements for each of the registered sources. Add a new item for each PCH input on sources flagged 'create'. -->
      <ClCompilePch Include="@(ClCompile->'%(RelativeDir)%(PrecompiledHeaderFile)')" Condition="'%(PrecompiledHeader)' == 'Create'">
        <ObjectFileName>%(ClCompile.PrecompiledHeaderOutputFile)</ObjectFileName>
        <CompileAs Condition="'%(ClCompile.CompileAs)' == 'CompileAsC'">CompileAsCHeader</CompileAs>
        <CompileAs Condition="'%(ClCompile.CompileAs)' != 'CompileAsC'">CompileAsCppHeader</CompileAs>
        <LinkCompiled Condition="'%(ClCompile.PrecompiledHeader)' == 'Create'">false</LinkCompiled>
      </ClCompilePch>
      <ClCompilePch>
        <ObjectFileName Condition="'%(ClCompile.ObjectFileName)' == '$(IntDir)'">$(IntDir)%(FileName)%(Extension).obj</ObjectFileName>
        <StandardLanguageDialect Condition="'%(ClCompile.CompileAs)' == 'CompileAsCHeader'">Default</StandardLanguageDialect>
      </ClCompilePch>

      <!-- GCC and Clang use slightly different methods of including PCHs. Clang also allows them to be placed in intermediate directories. -->
      <ClCompile>
        <OutputFile Condition="'%(ClCompile.PrecompiledHeader)' == 'Create'">%(ClCompile.PrecompiledHeaderOutputFile)</OutputFile>
        <ForcedIncludeFiles Condition="('%(ClCompile.PrecompiledHeader)' == 'Use' and '$(LlvmVersion)' == '')">$([System.String]::Copy('%(ClCompile.PrecompiledHeaderOutputFile)').Replace('.gch',''));%(ForcedIncludeFiles)</ForcedIncludeFiles>
        <ForcedIncludeFiles Condition="('%(ClCompile.PrecompiledHeader)' == 'Use' and '$(LlvmVersion)' != '')">$([System.String]::Copy('%(ClCompile.PrecompiledHeaderOutputFile)').Replace('.pch',''));%(ForcedIncludeFiles)</ForcedIncludeFiles>
        <AdditionalOptions Condition="'%(ClCompile.PrecompiledHeader)' == 'Use'">-Winvalid-pch %(AdditionalOptions)</AdditionalOptions>
      </ClCompile>
    </ItemGroup>

    <!--
      We differ slightly from Win32 targets here due to CL compiling both PCH and OBJ at the same time.
      To mimic this we need to first process the PCH export, and then follow this with actual OBJ compilation.
    -->

    <ItemGroup>
      <ClCompilePch>
        <ObjectFileName Condition="'%(ClCompilePch.ObjectFileName)' == '$(IntDir)'">$(IntDir)%(FileName)%(Extension).obj</ObjectFileName>
      </ClCompilePch>
    </ItemGroup>

    <NativeCompile
      Condition="'@(ClCompilePch)' != '' and '%(ClCompile.ExcludedFromBuild)'!='true'"
      BuildingInIDE="$(BuildingInsideVisualStudio)"
      SourceFiles="@(ClCompilePch)"
      ObjectFileName="%(ClCompilePch.ObjectFileName)"
      TrackerLogDirectory="%(ClCompile.TrackerLogDirectory)"
      TLogReadFiles="@(CLTLogReadFiles)"
      TLogWriteFiles="@(CLTLogWriteFiles)"
      MinimalRebuildFromTracking="%(ClCompile.MinimalRebuildFromTracking)"
      OutputCommandLine="%(ClCompile.OutputCommandLine)"
      ToolPath="$(PlatformToolsetCompileToolPath)"
      ToolExe="$(PlatformToolsetCompileTool)"
      PropertiesFile="$(MSBuildThisFileDirectory)\PlatformProps\$(PlatformToolset)\compile.xml">
    </NativeCompile>

    <!--
      Compile all sources, including those flagged to 'Create' PCH files (Reasoning above).
    -->

    <ItemGroup>
      <ClCompile>
        <ObjectFileName Condition="'%(ClCompile.ObjectFileName)' == '$(IntDir)'">$(IntDir)%(FileName)%(Extension).obj</ObjectFileName>
      </ClCompile>
    </ItemGroup>

    <NativeCompile
      Condition="'@(ClCompile)' != '' and '%(ClCompile.ExcludedFromBuild)'!='true'"
      BuildingInIDE="$(BuildingInsideVisualStudio)"
      SourceFiles="@(ClCompile)"
      ObjectFileName="%(ClCompile.ObjectFileName)"
      TrackerLogDirectory="%(ClCompile.TrackerLogDirectory)"
      TLogReadFiles="@(CLTLogReadFiles)"
      TLogWriteFiles="@(CLTLogWriteFiles)"
      MinimalRebuildFromTracking="%(ClCompile.MinimalRebuildFromTracking)"
      OutputCommandLine="%(ClCompile.OutputCommandLine)"
      ToolPath="$(PlatformToolsetCompileToolPath)"
      ToolExe="$(PlatformToolsetCompileTool)"
      PropertiesFile="$(MSBuildThisFileDirectory)\PlatformProps\$(PlatformToolset)\compile.xml">
    </NativeCompile>

  </Target>

  <!--
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->

  <!--
    'Link' based on: MSBuild\Microsoft.Cpp\v4.0\Microsoft.CppCommon.targets
  -->

  <Target
    Name="Link"
    Condition="'@(Link)' != ''">

    <PropertyGroup>
      <Link_MinimalRebuildFromTracking Condition="'@(Link->AnyHaveMetadataValue('MinimalRebuildFromTracking', 'false'))' == 'true'">false</Link_MinimalRebuildFromTracking>
      <Link_MinimalRebuildFromTracking Condition="'$(BuildType)' != 'Build' or '$(ForceRebuild)' == 'true'" >false</Link_MinimalRebuildFromTracking>
      <Link_MinimalRebuildFromTracking Condition="'$(Link_MinimalRebuildFromTracking)' == ''">true</Link_MinimalRebuildFromTracking>
    </PropertyGroup>

    <ItemGroup>
      <Link>
        <!-- Enforce dead-code stripping on exported application shared libraries and exectuables. -->
        <StripUnusedSymbols Condition="'$(ConfigurationType)' == 'Application' or '$(ConfigurationType)' == 'Executable'">true</StripUnusedSymbols>
      </Link>
    </ItemGroup>

    <NativeLink
      BuildingInIDE="$(BuildingInsideVisualStudio)"
      SourceFiles="@(Link)"
      TrackerLogDirectory="%(Link.TrackerLogDirectory)"
      TLogReadFiles="@(LinkTLogReadFiles)"
      TLogWriteFiles="@(LinkTLogWriteFiles)"
      MinimalRebuildFromTracking="$(Link_MinimalRebuildFromTracking)"
      OutputCommandLine="%(Link.OutputCommandLine)"
      ToolPath="$(PlatformToolsetLinkToolPath)"
      ToolExe="$(PlatformToolsetLinkTool)"
      PropertiesFile="$(MSBuildThisFileDirectory)\PlatformProps\$(PlatformToolset)\link.xml">
      <Output TaskParameter="OutputFiles" ItemName="LinkOutputFiles" />
      <Output TaskParameter="SkippedExecution" PropertyName="LinkSkippedExecution" />
    </NativeLink>

    <Message Condition="'$(LinkSkippedExecution)' == 'false'" Text="$(MSBuildProjectFile) -&gt; @(LinkOutputFiles)" Importance="High" />

    <!--
      Separate debugging info/symbols from output library. Create a dedicated symbols file.
    -->

    <PropertyGroup>
      <_LinkStripUnusedSymbols>%(Link.StripUnusedSymbols)</_LinkStripUnusedSymbols>
      <_LinkStripDebugSymbols>%(Link.StripDebugSymbols)</_LinkStripDebugSymbols>
      <_LinkStripSymbolsRequired>false</_LinkStripSymbolsRequired>
      <_LinkStripSymbolsRequired Condition="('$(_LinkStripUnusedSymbols)' == 'true' or '$(_LinkStripDebugSymbols)' == 'true')">true</_LinkStripSymbolsRequired>
      <_LinkStripSymbolsRequired Condition="'$(LinkSkippedExecution)' == 'true'">false</_LinkStripSymbolsRequired>

      <_DebugLinkSharedLibrary>@(LinkOutputFiles->'%(FullPath)')</_DebugLinkSharedLibrary>
      <_DebugLinkSharedLibraryAutoloadScript>@(LinkOutputFiles->'%(RootDir)%(Directory)%(Filename).gdb')</_DebugLinkSharedLibraryAutoloadScript>
      <_DebugLinkSymbolsFile>@(LinkOutputFiles->'%(RootDir)%(Directory)%(Filename).debug')</_DebugLinkSymbolsFile>
    </PropertyGroup>

    <Exec
      Condition="('@(LinkOutputFiles)' != '' and '$(_LinkStripSymbolsRequired)' == 'true')"
      Command="$(PlatformToolsetObjcopyToolPath)\$(PlatformToolsetObjcopyTool) --only-keep-debug $(_DebugLinkSharedLibrary) $(_DebugLinkSymbolsFile)"
    />

    <Error Condition="('$(_LinkStripSymbolsRequired)' == 'true' and !Exists('$(_DebugLinkSymbolsFile)'))" Text="Failed to export separated debug symbols file. Expected: $(_DebugLinkSymbolsFile)" />

    <Message Condition="'$(_LinkStripSymbolsRequired)' == 'true'" Text="$(MSBuildProjectFile) -&gt; $(_DebugLinkSymbolsFile)" Importance="High" />

    <!--
      Strip info/symbols from exported libraries, and create a link between these and their separated (paired) .debug symbol file.
    -->

    <ItemGroup>
      <LinkOutputFiles>
        <MinimalRebuildFromTracking>%(Link.MinimalRebuildFromTracking)</MinimalRebuildFromTracking>
        <OutputCommandLine>%(Link.OutputCommandLine)</OutputCommandLine>
        <StripUnusedSymbols>$(_LinkStripUnusedSymbols)</StripUnusedSymbols>
        <StripDebugSymbols>$(_LinkStripDebugSymbols)</StripDebugSymbols>
        <TrackerLogDirectory>%(Link.TrackerLogDirectory)</TrackerLogDirectory>
      </LinkOutputFiles>
    </ItemGroup>

    <NativeStrip
      BuildingInIDE="$(BuildingInsideVisualStudio)"
      Condition="('@(LinkOutputFiles)' != '' and '$(_LinkStripSymbolsRequired)' == 'true')"
      SourceFiles="@(LinkOutputFiles)"
      MinimalRebuildFromTracking="%(LinkOutputFiles.MinimalRebuildFromTracking)"
      OutputCommandLine="%(LinkOutputFiles.OutputCommandLine)"
      PropertiesFile="$(MSBuildThisFileDirectory)\PlatformProps\$(PlatformToolset)\strip.xml"
      ToolPath="$(PlatformToolsetStripToolPath)"
      ToolExe="$(PlatformToolsetStripTool)"
      TrackerLogDirectory="%(LinkOutputFiles.TrackerLogDirectory)">
    </NativeStrip>

    <Exec
      Condition="('@(LinkOutputFiles)' != '' and '$(_LinkStripSymbolsRequired)' == 'true')"
      Command="$(PlatformToolsetObjcopyToolPath)\$(PlatformToolsetObjcopyTool) --add-gnu-debuglink=$(_DebugLinkSymbolsFile) $(_DebugLinkSharedLibrary)"
    />

    <!--
      Evaluate library build-id and place debugging symbols under .\.build-id\[ab]\[cdefghijklmnopqrstuvwxyz].debug so GDB can find this via 'debug-files-directory'
      - More info: https://sourceware.org/gdb/onlinedocs/gdb/Separate-Debug-Files.html
    -->

    <NativeBuildId
      Condition="('@(LinkOutputFiles)' != '' and '$(_LinkStripSymbolsRequired)' == 'true')"
      ElfInput="$(_DebugLinkSharedLibrary)"
      ToolPath="$(PlatformToolsetReadElfToolPath)"
      ToolExe="$(PlatformToolsetReadElfTool)"
      TrackerLogDirectory="%(LinkOutputFiles.TrackerLogDirectory)">
      <Output TaskParameter="BuildId" PropertyName="_DebugLinkSharedLibraryBuildId" />
    </NativeBuildId>

    <PropertyGroup Condition="'$(_DebugLinkSharedLibraryBuildId)' != ''">
      <_DebugLinkBuildIdPath>$([System.IO.Path]::GetDirectoryName('$(_DebugLinkSharedLibrary)'))\.build-id\$(_DebugLinkSharedLibraryBuildId.Substring(0,2))</_DebugLinkBuildIdPath>
      <_DebugLinkBuildIdFilename>$(_DebugLinkSharedLibraryBuildId.Substring(2)).debug</_DebugLinkBuildIdFilename>
      <_DebugLinkBuildIdOutputPath>$(_DebugLinkBuildIdPath)\$(_DebugLinkBuildIdFilename)</_DebugLinkBuildIdOutputPath>
    </PropertyGroup>

    <MakeDir Condition="'$(_DebugLinkBuildIdPath)' != ''" Directories="$(_DebugLinkBuildIdPath)" />

    <!--
      Create a symbolic link to the original .debug symbols file. This should hopefully reduce sprawling build sizes.
    -->

    <Exec
      Condition="('$(_DebugLinkBuildIdOutputPath)' != '' and Exists('$(_DebugLinkBuildIdOutputPath)'))"
      Command="del /q &quot;$(_DebugLinkBuildIdOutputPath)&quot;"
      IgnoreExitCode="true"
    />

    <Exec
      Condition="('$(_DebugLinkBuildIdOutputPath)' != '' and Exists('$(_DebugLinkBuildIdOutputPath)'))"
      Command="mklink &quot;$(_DebugLinkBuildIdPath)\$(_DebugLinkBuildIdFilename)&quot; &quot;$(_DebugLinkSymbolsFile)&quot;"
    />

    <WriteLinesToFile
      Condition="('$(_DebugLinkBuildIdOutputPath)' != '' and Exists('$(_DebugLinkBuildIdOutputPath)'))"
      File="$(_DebugLinkBuildIdOutputPath).txt"
      Lines="Debugging symbols for library: $(_DebugLinkSharedLibrary);Original file: $(_DebugLinkSymbolsFile);Build-id: $(_DebugLinkSharedLibraryBuildId);"
      Overwrite="true"
    />

    <!--
      Construct a GDB setup execution script, then embed this as an additional section ('gdb.setup') in the target library.
    -->

    <ItemGroup>
      <_GdbSearchDirectories Include="$(OutDir);$(LibraryPath)" />
      <_GdbDebugFileDirectories Condition="'$(_DebugLinkSharedLibrary)' != ''" Include="$([System.IO.Path]::GetDirectoryName('$(_DebugLinkSharedLibrary)'))" />
    </ItemGroup>

    <PropertyGroup>
      <Semicolon>%3B</Semicolon>
      <GdbSetupExecutionScript>$(_DebugLinkSharedLibraryAutoloadScript)</GdbSetupExecutionScript>
      <GdbSourceDirectories>@(_GdbSearchDirectories->'%(FullPath)', '$(Semicolon)')</GdbSourceDirectories>
      <GdbDebugFileDirectories>@(_GdbDebugFileDirectories->'%(FullPath)', '$(Semicolon)')</GdbDebugFileDirectories>
    </PropertyGroup>

    <Delete Condition="Exists('$(GdbSetupExecutionScript)')" Files="$(GdbSetupExecutionScript)" />

    <WriteLinesToFile
      Condition="'$(GdbSetupExecutionScript)' != '' and '$(GdbSourceDirectories)' != ''"
      File="$(GdbSetupExecutionScript)"
      Lines="directory $(GdbSourceDirectories);"
      Overwrite="true"
    />

    <WriteLinesToFile
      Condition="'$(GdbSetupExecutionScript)' != '' and '$(GdbDebugFileDirectories)' != ''"
      File="$(GdbSetupExecutionScript)"
      Lines="set solib-search-path $(GdbDebugFileDirectories);set debug-file-directory $(GdbDebugFileDirectories);"
      Overwrite="false"
    />

    <Exec
      Condition="('@(LinkOutputFiles)' != '' and '$(_LinkStripSymbolsRequired)' == 'true' and Exists('$(GdbSetupExecutionScript)'))"
      Command="$(PlatformToolsetObjcopyToolPath)\$(PlatformToolsetObjcopyTool) --add-section debug_gdb_scripts=$(GdbSetupExecutionScript) $(_DebugLinkSharedLibrary)"
    />

  </Target>

  <!--
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->

  <!--
    'Lib' based on: MSBuild\Microsoft.Cpp\v4.0\Microsoft.CppCommon.targets
  -->

  <Target
    Name="Lib"
    Condition="'@(Lib)' != ''">

    <ItemGroup>
      <Lib>
        <MinimalRebuildFromTracking Condition="'%(Lib.MinimalRebuildFromTracking)' == '' and '$(BuildType)' == 'Build' and '$(ForceRebuild)' != 'true'">true</MinimalRebuildFromTracking>
      </Lib>
    </ItemGroup>

    <Delete Files="%(Lib.OutputFile)" />

    <NativeLib
      BuildingInIDE="$(BuildingInsideVisualStudio)"
      SourceFiles="@(Lib)"
      TrackerLogDirectory="%(Lib.TrackerLogDirectory)"
      TLogReadFiles="@(LIBTLogReadFiles)"
      TLogWriteFiles="@(LIBTLogWriteFiles)"
      MinimalRebuildFromTracking="%(Lib.MinimalRebuildFromTracking)"
      OutputCommandLine="%(Lib.OutputCommandLine)"
      ToolPath="$(PlatformToolsetLibToolPath)"
      ToolExe="$(PlatformToolsetLibTool)"
      PropertiesFile="$(MSBuildThisFileDirectory)\PlatformProps\$(PlatformToolset)\lib.xml">
      <Output TaskParameter="OutputFiles" ItemName="LibOutputFiles" />
      <Output TaskParameter="SkippedExecution" PropertyName="LibSkippedExecution" />
    </NativeLib>

    <Message Condition="'$(LibSkippedExecution)' == 'false'" Text="$(MSBuildProjectFile) -&gt; @(LibOutputFiles)" Importance="High" />

    <!--
      Strip unused and debugging symbols, when requested.
    -->

    <ItemGroup>
      <LibOutputFiles>
        <StripUnusedSymbols>%(Lib.StripUnusedSymbols)</StripUnusedSymbols>
        <StripDebugSymbols>%(Lib.StripDebugSymbols)</StripDebugSymbols>
        <!-- Obviously I don't understand MSBuild, because referencing these props directly in NativeStrip doesn't work. -->
        <TrackerLogDirectory>%(Lib.TrackerLogDirectory)</TrackerLogDirectory>
        <MinimalRebuildFromTracking>%(Lib.MinimalRebuildFromTracking)</MinimalRebuildFromTracking>
        <OutputCommandLine>%(Lib.OutputCommandLine)</OutputCommandLine>
      </LibOutputFiles>
    </ItemGroup>

    <Copy
      Condition="('@(LibOutputFiles)' != '' and ('%(StripUnusedSymbols)' == 'true' or '%(StripDebugSymbols)' == 'true'))"
      SourceFiles="@(LibOutputFiles)"
      DestinationFiles="$(OutDir)$(TargetName)$(TargetExt).unstripped"
    />

    <NativeStrip
      BuildingInIDE="$(BuildingInsideVisualStudio)"
      Condition="('@(LibOutputFiles)' != '' and ('%(StripUnusedSymbols)' == 'true' or '%(StripDebugSymbols)' == 'true'))"
      SourceFiles="@(LibOutputFiles)"
      TrackerLogDirectory="%(LibOutputFiles.TrackerLogDirectory)"
      MinimalRebuildFromTracking="%(LibOutputFiles.MinimalRebuildFromTracking)"
      OutputCommandLine="%(LibOutputFiles.OutputCommandLine)"
      ToolPath="$(PlatformToolsetStripToolPath)"
      ToolExe="$(PlatformToolsetStripTool)"
      PropertiesFile="$(MSBuildThisFileDirectory)\PlatformProps\$(PlatformToolset)\strip.xml"
    />

  </Target>

  <!--
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->

</Project>

<!--
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-->
